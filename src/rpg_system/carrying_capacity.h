#ifndef CARRYING_CAPACITY_H
#define CARRYING_CAPACITY_H

#include <map>
#include <race_type.h>

namespace amarlon {

namespace CarryingCapacity
{

  static const int HEAVY_LOAD_SPEED_PENALTY = 10;

  enum class LoadLevel
  {
    Light,
    Heavy
  };

  struct Data
  {
    Data(int i_light = 0, int i_heavy = 0)
      : light(i_light)
      , heavy(i_heavy)
    {}

    int light;
    int heavy;
  };

  Data get(int str, RaceType race);

  static std::map<RaceType, std::map<int, Data> > capacityTable =
  {
    {
      RaceType::Human,
      {
        {3,  {25, 60} },
        {4,  {35, 90} },
        {5,  {35, 90} },
        {6,  {50, 120} },
        {7,  {50, 120} },
        {8,  {50, 120} },
        {9,  {60, 150} },
        {10, {60, 150} },
        {11, {60, 150} },
        {12, {60, 150} },
        {13, {65, 165} },
        {14, {65, 165} },
        {15, {65, 165} },
        {16, {70, 180} },
        {17, {70, 180} },
        {18, {80, 195} }
      }
    },
    {
      RaceType::Dwarf,
      {
        {3,  {25, 60} },
        {4,  {35, 90} },
        {5,  {35, 90} },
        {6,  {50, 120} },
        {7,  {50, 120} },
        {8,  {50, 120} },
        {9,  {60, 150} },
        {10, {60, 150} },
        {11, {60, 150} },
        {12, {60, 150} },
        {13, {65, 165} },
        {14, {65, 165} },
        {15, {65, 165} },
        {16, {70, 180} },
        {17, {70, 180} },
        {18, {80, 195} }
      }
    },
    {
      RaceType::Elf,
      {
        {3,  {25, 60} },
        {4,  {35, 90} },
        {5,  {35, 90} },
        {6,  {50, 120} },
        {7,  {50, 120} },
        {8,  {50, 120} },
        {9,  {60, 150} },
        {10, {60, 150} },
        {11, {60, 150} },
        {12, {60, 150} },
        {13, {65, 165} },
        {14, {65, 165} },
        {15, {65, 165} },
        {16, {70, 180} },
        {17, {70, 180} },
        {18, {80, 195} }
      }
    },
    {
      RaceType::Halfling,
      {
        {3,  {20, 40} },
        {4,  {30, 60} },
        {5,  {30, 60} },
        {6,  {40, 80} },
        {7,  {40, 80} },
        {8,  {40, 80} },
        {9,  {50, 100} },
        {10, {50, 100} },
        {11, {50, 100} },
        {12, {50, 100} },
        {13, {55, 110} },
        {14, {55, 110} },
        {15, {55, 110} },
        {16, {60, 120} },
        {17, {60, 120} },
        {18, {65, 130} }
      }
    }
  };

}

}


#endif // CARRYING_CAPACITY_H
