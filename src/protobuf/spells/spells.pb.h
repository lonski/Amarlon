// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spells.proto

#ifndef PROTOBUF_spells_2eproto__INCLUDED
#define PROTOBUF_spells_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace amarlon {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_spells_2eproto();
void protobuf_AssignDesc_spells_2eproto();
void protobuf_ShutdownFile_spells_2eproto();

class SpellData;
class SpellsData;

// ===================================================================

class SpellData : public ::google::protobuf::Message {
 public:
  SpellData();
  virtual ~SpellData();

  SpellData(const SpellData& from);

  inline SpellData& operator=(const SpellData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpellData& default_instance();

  void Swap(SpellData* other);

  // implements Message ----------------------------------------------

  inline SpellData* New() const { return New(NULL); }

  SpellData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpellData& from);
  void MergeFrom(const SpellData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpellData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 class = 4;
  bool has_class_() const;
  void clear_class_();
  static const int kClassFieldNumber = 4;
  ::google::protobuf::int32 class_() const;
  void set_class_(::google::protobuf::int32 value);

  // required int32 target = 5;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 5;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // optional float range = 6 [default = 0];
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 6;
  float range() const;
  void set_range(float value);

  // optional float radius = 7 [default = 0];
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 7;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:amarlon.proto.SpellData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_class_();
  inline void clear_has_class_();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_radius();
  inline void clear_has_radius();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 class__;
  ::google::protobuf::int32 target_;
  float range_;
  float radius_;
  friend void  protobuf_AddDesc_spells_2eproto();
  friend void protobuf_AssignDesc_spells_2eproto();
  friend void protobuf_ShutdownFile_spells_2eproto();

  void InitAsDefaultInstance();
  static SpellData* default_instance_;
};
// -------------------------------------------------------------------

class SpellsData : public ::google::protobuf::Message {
 public:
  SpellsData();
  virtual ~SpellsData();

  SpellsData(const SpellsData& from);

  inline SpellsData& operator=(const SpellsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpellsData& default_instance();

  void Swap(SpellsData* other);

  // implements Message ----------------------------------------------

  inline SpellsData* New() const { return New(NULL); }

  SpellsData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpellsData& from);
  void MergeFrom(const SpellsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpellsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .amarlon.proto.SpellData spell = 1;
  int spell_size() const;
  void clear_spell();
  static const int kSpellFieldNumber = 1;
  const ::amarlon::proto::SpellData& spell(int index) const;
  ::amarlon::proto::SpellData* mutable_spell(int index);
  ::amarlon::proto::SpellData* add_spell();
  ::google::protobuf::RepeatedPtrField< ::amarlon::proto::SpellData >*
      mutable_spell();
  const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::SpellData >&
      spell() const;

  // @@protoc_insertion_point(class_scope:amarlon.proto.SpellsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::proto::SpellData > spell_;
  friend void  protobuf_AddDesc_spells_2eproto();
  friend void protobuf_AssignDesc_spells_2eproto();
  friend void protobuf_ShutdownFile_spells_2eproto();

  void InitAsDefaultInstance();
  static SpellsData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellData

// required int32 id = 1;
inline bool SpellData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpellData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpellData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpellData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpellData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.id)
  return id_;
}
inline void SpellData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.id)
}

// required string name = 2;
inline bool SpellData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpellData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpellData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpellData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SpellData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpellData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.name)
}
inline void SpellData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.SpellData.name)
}
inline void SpellData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.SpellData.name)
}
inline ::std::string* SpellData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.SpellData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpellData::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpellData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.SpellData.name)
}

// required int32 level = 3;
inline bool SpellData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpellData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpellData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpellData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SpellData::level() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.level)
  return level_;
}
inline void SpellData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.level)
}

// required int32 class = 4;
inline bool SpellData::has_class_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpellData::set_has_class_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpellData::clear_has_class_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpellData::clear_class_() {
  class__ = 0;
  clear_has_class_();
}
inline ::google::protobuf::int32 SpellData::class_() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.class)
  return class__;
}
inline void SpellData::set_class_(::google::protobuf::int32 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.class)
}

// required int32 target = 5;
inline bool SpellData::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpellData::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpellData::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpellData::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 SpellData::target() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.target)
  return target_;
}
inline void SpellData::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.target)
}

// optional float range = 6 [default = 0];
inline bool SpellData::has_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpellData::set_has_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpellData::clear_has_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpellData::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline float SpellData::range() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.range)
  return range_;
}
inline void SpellData::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.range)
}

// optional float radius = 7 [default = 0];
inline bool SpellData::has_radius() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpellData::set_has_radius() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpellData::clear_has_radius() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpellData::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float SpellData::radius() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellData.radius)
  return radius_;
}
inline void SpellData::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.SpellData.radius)
}

// -------------------------------------------------------------------

// SpellsData

// repeated .amarlon.proto.SpellData spell = 1;
inline int SpellsData::spell_size() const {
  return spell_.size();
}
inline void SpellsData::clear_spell() {
  spell_.Clear();
}
inline const ::amarlon::proto::SpellData& SpellsData::spell(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.proto.SpellsData.spell)
  return spell_.Get(index);
}
inline ::amarlon::proto::SpellData* SpellsData::mutable_spell(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.proto.SpellsData.spell)
  return spell_.Mutable(index);
}
inline ::amarlon::proto::SpellData* SpellsData::add_spell() {
  // @@protoc_insertion_point(field_add:amarlon.proto.SpellsData.spell)
  return spell_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::proto::SpellData >*
SpellsData::mutable_spell() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.proto.SpellsData.spell)
  return &spell_;
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::SpellData >&
SpellsData::spell() const {
  // @@protoc_insertion_point(field_list:amarlon.proto.SpellsData.spell)
  return spell_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace amarlon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spells_2eproto__INCLUDED
