// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "actors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ActorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Inventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Character_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Character_AbilityScores_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Character_AbilityScores_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Character_Spell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Character_Spell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Destroyable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Destroyable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Destroyable_DropRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Destroyable_DropRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Wearer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Wearer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Wearer_ItemSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Wearer_ItemSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Ai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Ai_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Openable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Openable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorData_Pickable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorData_Pickable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorsData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_actors_2eproto() {
  protobuf_AddDesc_actors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "actors.proto");
  GOOGLE_CHECK(file != NULL);
  ActorData_descriptor_ = file->message_type(0);
  static const int ActorData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, fovonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, destroyable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, wearer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, ai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, openable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, pickable_),
  };
  ActorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_descriptor_,
      ActorData::default_instance_,
      ActorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData, _internal_metadata_),
      -1);
  ActorData_Inventory_descriptor_ = ActorData_descriptor_->nested_type(0);
  static const int ActorData_Inventory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Inventory, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Inventory, item_),
  };
  ActorData_Inventory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Inventory_descriptor_,
      ActorData_Inventory::default_instance_,
      ActorData_Inventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Inventory, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Inventory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Inventory, _internal_metadata_),
      -1);
  ActorData_Character_descriptor_ = ActorData_descriptor_->nested_type(1);
  static const int ActorData_Character_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, hpbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, morale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, abilityscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, spells_),
  };
  ActorData_Character_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Character_descriptor_,
      ActorData_Character::default_instance_,
      ActorData_Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Character),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character, _internal_metadata_),
      -1);
  ActorData_Character_AbilityScores_descriptor_ = ActorData_Character_descriptor_->nested_type(0);
  static const int ActorData_Character_AbilityScores_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, int__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, wis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, cha_),
  };
  ActorData_Character_AbilityScores_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Character_AbilityScores_descriptor_,
      ActorData_Character_AbilityScores::default_instance_,
      ActorData_Character_AbilityScores_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Character_AbilityScores),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_AbilityScores, _internal_metadata_),
      -1);
  ActorData_Character_Spell_descriptor_ = ActorData_Character_descriptor_->nested_type(1);
  static const int ActorData_Character_Spell_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_Spell, id_),
  };
  ActorData_Character_Spell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Character_Spell_descriptor_,
      ActorData_Character_Spell::default_instance_,
      ActorData_Character_Spell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_Spell, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Character_Spell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Character_Spell, _internal_metadata_),
      -1);
  ActorData_Destroyable_descriptor_ = ActorData_descriptor_->nested_type(2);
  static const int ActorData_Destroyable_offsets_[1] = {
  };
  ActorData_Destroyable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Destroyable_descriptor_,
      ActorData_Destroyable::default_instance_,
      ActorData_Destroyable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Destroyable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable, _internal_metadata_),
      -1);
  ActorData_Destroyable_DropRule_descriptor_ = ActorData_Destroyable_descriptor_->nested_type(0);
  static const int ActorData_Destroyable_DropRule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, chance_),
  };
  ActorData_Destroyable_DropRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Destroyable_DropRule_descriptor_,
      ActorData_Destroyable_DropRule::default_instance_,
      ActorData_Destroyable_DropRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Destroyable_DropRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Destroyable_DropRule, _internal_metadata_),
      -1);
  ActorData_Wearer_descriptor_ = ActorData_descriptor_->nested_type(3);
  static const int ActorData_Wearer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer, itemslots_),
  };
  ActorData_Wearer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Wearer_descriptor_,
      ActorData_Wearer::default_instance_,
      ActorData_Wearer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Wearer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer, _internal_metadata_),
      -1);
  ActorData_Wearer_ItemSlot_descriptor_ = ActorData_Wearer_descriptor_->nested_type(0);
  static const int ActorData_Wearer_ItemSlot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer_ItemSlot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer_ItemSlot, item_),
  };
  ActorData_Wearer_ItemSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Wearer_ItemSlot_descriptor_,
      ActorData_Wearer_ItemSlot::default_instance_,
      ActorData_Wearer_ItemSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer_ItemSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Wearer_ItemSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Wearer_ItemSlot, _internal_metadata_),
      -1);
  ActorData_Ai_descriptor_ = ActorData_descriptor_->nested_type(4);
  static const int ActorData_Ai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Ai, type_),
  };
  ActorData_Ai_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Ai_descriptor_,
      ActorData_Ai::default_instance_,
      ActorData_Ai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Ai, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Ai),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Ai, _internal_metadata_),
      -1);
  ActorData_Openable_descriptor_ = ActorData_descriptor_->nested_type(5);
  static const int ActorData_Openable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Openable, scriptid_),
  };
  ActorData_Openable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Openable_descriptor_,
      ActorData_Openable::default_instance_,
      ActorData_Openable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Openable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Openable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Openable, _internal_metadata_),
      -1);
  ActorData_Pickable_descriptor_ = ActorData_descriptor_->nested_type(6);
  static const int ActorData_Pickable_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, stackable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, uses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, itemslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, scriptid_),
  };
  ActorData_Pickable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorData_Pickable_descriptor_,
      ActorData_Pickable::default_instance_,
      ActorData_Pickable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorData_Pickable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorData_Pickable, _internal_metadata_),
      -1);
  ActorsData_descriptor_ = file->message_type(1);
  static const int ActorsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorsData, actor_),
  };
  ActorsData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActorsData_descriptor_,
      ActorsData::default_instance_,
      ActorsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorsData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActorsData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorsData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_actors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_descriptor_, &ActorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Inventory_descriptor_, &ActorData_Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Character_descriptor_, &ActorData_Character::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Character_AbilityScores_descriptor_, &ActorData_Character_AbilityScores::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Character_Spell_descriptor_, &ActorData_Character_Spell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Destroyable_descriptor_, &ActorData_Destroyable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Destroyable_DropRule_descriptor_, &ActorData_Destroyable_DropRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Wearer_descriptor_, &ActorData_Wearer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Wearer_ItemSlot_descriptor_, &ActorData_Wearer_ItemSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Ai_descriptor_, &ActorData_Ai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Openable_descriptor_, &ActorData_Openable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorData_Pickable_descriptor_, &ActorData_Pickable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActorsData_descriptor_, &ActorsData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_actors_2eproto() {
  delete ActorData::default_instance_;
  delete ActorData_reflection_;
  delete ActorData::_default_symbol_;
  delete ActorData::_default_color_;
  delete ActorData_Inventory::default_instance_;
  delete ActorData_Inventory_reflection_;
  delete ActorData_Character::default_instance_;
  delete ActorData_Character_reflection_;
  delete ActorData_Character::_default_damage_;
  delete ActorData_Character_AbilityScores::default_instance_;
  delete ActorData_Character_AbilityScores_reflection_;
  delete ActorData_Character_Spell::default_instance_;
  delete ActorData_Character_Spell_reflection_;
  delete ActorData_Destroyable::default_instance_;
  delete ActorData_Destroyable_reflection_;
  delete ActorData_Destroyable_DropRule::default_instance_;
  delete ActorData_Destroyable_DropRule_reflection_;
  delete ActorData_Wearer::default_instance_;
  delete ActorData_Wearer_reflection_;
  delete ActorData_Wearer_ItemSlot::default_instance_;
  delete ActorData_Wearer_ItemSlot_reflection_;
  delete ActorData_Ai::default_instance_;
  delete ActorData_Ai_reflection_;
  delete ActorData_Openable::default_instance_;
  delete ActorData_Openable_reflection_;
  delete ActorData_Pickable::default_instance_;
  delete ActorData_Pickable_reflection_;
  delete ActorData_Pickable::_default_damage_;
  delete ActorsData::default_instance_;
  delete ActorsData_reflection_;
}

void protobuf_AddDesc_actors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014actors.proto\022\ramarlon.proto\"\233\014\n\tActorD"
    "ata\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\021\n\006symbol\030"
    "\003 \001(\t:\001@\022\025\n\005color\030\004 \001(\t:\006ffffff\022\024\n\006block"
    "s\030\005 \001(\010:\004true\022\025\n\007fovOnly\030\006 \001(\010:\004true\022\025\n\013"
    "description\030\007 \001(\t:\000\0225\n\tinventory\030\010 \001(\0132\""
    ".amarlon.proto.ActorData.Inventory\0225\n\tch"
    "aracter\030\t \001(\0132\".amarlon.proto.ActorData."
    "Character\0229\n\013destroyable\030\n \001(\0132$.amarlon"
    ".proto.ActorData.Destroyable\022/\n\006wearer\030\013"
    " \001(\0132\037.amarlon.proto.ActorData.Wearer\022\'\n"
    "\002ai\030\014 \001(\0132\033.amarlon.proto.ActorData.Ai\0223"
    "\n\010openable\030\r \001(\0132!.amarlon.proto.ActorDa"
    "ta.Openable\0223\n\010pickable\030\016 \001(\0132!.amarlon."
    "proto.ActorData.Pickable\032F\n\tInventory\022\021\n"
    "\005slots\030\001 \001(\005:\00220\022&\n\004item\030\002 \003(\0132\030.amarlon"
    ".proto.ActorData\032\313\003\n\tCharacter\022\r\n\005level\030"
    "\001 \002(\005\022\r\n\005class\030\002 \002(\005\022\014\n\004race\030\003 \002(\005\022\025\n\nex"
    "perience\030\004 \001(\005:\0010\022\020\n\005armor\030\005 \001(\005:\0010\022\021\n\005s"
    "peed\030\006 \001(\005:\00240\022\r\n\002hp\030\007 \001(\005:\0010\022\020\n\005maxHp\030\010"
    " \001(\005:\0010\022\022\n\007hpBonus\030\t \001(\005:\0010\022\027\n\006damage\030\n "
    "\001(\t:\0070d0+0#0\022\021\n\006morale\030\013 \001(\005:\0010\022G\n\rabili"
    "tyScores\030\014 \001(\01320.amarlon.proto.ActorData"
    ".Character.AbilityScores\0228\n\006spells\030\r \003(\013"
    "2(.amarlon.proto.ActorData.Character.Spe"
    "ll\032]\n\rAbilityScores\022\013\n\003STR\030\001 \002(\005\022\013\n\003INT\030"
    "\002 \002(\005\022\013\n\003WIS\030\003 \002(\005\022\013\n\003DEX\030\004 \002(\005\022\013\n\003CON\030\005"
    " \002(\005\022\013\n\003CHA\030\006 \002(\005\032\023\n\005Spell\022\n\n\002id\030\001 \002(\005\032\\"
    "\n\013Destroyable\032M\n\010DropRule\022\016\n\006itemId\030\001 \002("
    "\005\022\016\n\003min\030\002 \001(\005:\0011\022\016\n\003max\030\003 \001(\005:\0011\022\021\n\006cha"
    "nce\030\004 \001(\002:\0011\032\205\001\n\006Wearer\022;\n\titemSlots\030\001 \003"
    "(\0132(.amarlon.proto.ActorData.Wearer.Item"
    "Slot\032>\n\010ItemSlot\022\n\n\002id\030\001 \002(\005\022&\n\004item\030\002 \001"
    "(\0132\030.amarlon.proto.ActorData\032\022\n\002Ai\022\014\n\004ty"
    "pe\030\001 \002(\005\032\034\n\010Openable\022\020\n\010scriptId\030\001 \002(\005\032\352"
    "\001\n\010Pickable\022\030\n\tstackable\030\001 \001(\010:\005false\022\021\n"
    "\006amount\030\002 \001(\005:\0011\022\017\n\004uses\030\003 \001(\005:\0010\022\023\n\010ite"
    "mSlot\030\004 \001(\005:\0010\022\023\n\010category\030\005 \001(\005:\0010\022\020\n\005a"
    "rmor\030\006 \001(\005:\0010\022\021\n\006weight\030\007 \001(\005:\0010\022\020\n\005pric"
    "e\030\010 \001(\005:\0010\022\021\n\006target\030\t \001(\005:\0010\022\027\n\006damage\030"
    "\n \001(\t:\0070d0+0#0\022\023\n\010scriptId\030\013 \001(\005:\0010\"5\n\nA"
    "ctorsData\022\'\n\005actor\030\001 \003(\0132\030.amarlon.proto"
    ".ActorData", 1650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "actors.proto", &protobuf_RegisterTypes);
  ActorData::_default_symbol_ =
      new ::std::string("@", 1);
  ActorData::_default_color_ =
      new ::std::string("ffffff", 6);
  ActorData::default_instance_ = new ActorData();
  ActorData_Inventory::default_instance_ = new ActorData_Inventory();
  ActorData_Character::_default_damage_ =
      new ::std::string("0d0+0#0", 7);
  ActorData_Character::default_instance_ = new ActorData_Character();
  ActorData_Character_AbilityScores::default_instance_ = new ActorData_Character_AbilityScores();
  ActorData_Character_Spell::default_instance_ = new ActorData_Character_Spell();
  ActorData_Destroyable::default_instance_ = new ActorData_Destroyable();
  ActorData_Destroyable_DropRule::default_instance_ = new ActorData_Destroyable_DropRule();
  ActorData_Wearer::default_instance_ = new ActorData_Wearer();
  ActorData_Wearer_ItemSlot::default_instance_ = new ActorData_Wearer_ItemSlot();
  ActorData_Ai::default_instance_ = new ActorData_Ai();
  ActorData_Openable::default_instance_ = new ActorData_Openable();
  ActorData_Pickable::_default_damage_ =
      new ::std::string("0d0+0#0", 7);
  ActorData_Pickable::default_instance_ = new ActorData_Pickable();
  ActorsData::default_instance_ = new ActorsData();
  ActorData::default_instance_->InitAsDefaultInstance();
  ActorData_Inventory::default_instance_->InitAsDefaultInstance();
  ActorData_Character::default_instance_->InitAsDefaultInstance();
  ActorData_Character_AbilityScores::default_instance_->InitAsDefaultInstance();
  ActorData_Character_Spell::default_instance_->InitAsDefaultInstance();
  ActorData_Destroyable::default_instance_->InitAsDefaultInstance();
  ActorData_Destroyable_DropRule::default_instance_->InitAsDefaultInstance();
  ActorData_Wearer::default_instance_->InitAsDefaultInstance();
  ActorData_Wearer_ItemSlot::default_instance_->InitAsDefaultInstance();
  ActorData_Ai::default_instance_->InitAsDefaultInstance();
  ActorData_Openable::default_instance_->InitAsDefaultInstance();
  ActorData_Pickable::default_instance_->InitAsDefaultInstance();
  ActorsData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_actors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_actors_2eproto {
  StaticDescriptorInitializer_actors_2eproto() {
    protobuf_AddDesc_actors_2eproto();
  }
} static_descriptor_initializer_actors_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ActorData_Inventory::kSlotsFieldNumber;
const int ActorData_Inventory::kItemFieldNumber;
#endif  // !_MSC_VER

ActorData_Inventory::ActorData_Inventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Inventory)
}

void ActorData_Inventory::InitAsDefaultInstance() {
}

ActorData_Inventory::ActorData_Inventory(const ActorData_Inventory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Inventory)
}

void ActorData_Inventory::SharedCtor() {
  _cached_size_ = 0;
  slots_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Inventory::~ActorData_Inventory() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Inventory)
  SharedDtor();
}

void ActorData_Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Inventory_descriptor_;
}

const ActorData_Inventory& ActorData_Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Inventory* ActorData_Inventory::default_instance_ = NULL;

ActorData_Inventory* ActorData_Inventory::New(::google::protobuf::Arena* arena) const {
  ActorData_Inventory* n = new ActorData_Inventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Inventory::Clear() {
  slots_ = 20;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Inventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slots = 1 [default = 20];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slots_)));
          set_has_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .amarlon.proto.ActorData item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Inventory)
  return false;
#undef DO_
}

void ActorData_Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Inventory)
  // optional int32 slots = 1 [default = 20];
  if (has_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slots(), output);
  }

  // repeated .amarlon.proto.ActorData item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Inventory)
}

::google::protobuf::uint8* ActorData_Inventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Inventory)
  // optional int32 slots = 1 [default = 20];
  if (has_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slots(), target);
  }

  // repeated .amarlon.proto.ActorData item = 2;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Inventory)
  return target;
}

int ActorData_Inventory::ByteSize() const {
  int total_size = 0;

  // optional int32 slots = 1 [default = 20];
  if (has_slots()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slots());
  }

  // repeated .amarlon.proto.ActorData item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Inventory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Inventory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Inventory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Inventory::MergeFrom(const ActorData_Inventory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slots()) {
      set_slots(from.slots());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Inventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Inventory::CopyFrom(const ActorData_Inventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Inventory::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void ActorData_Inventory::Swap(ActorData_Inventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Inventory::InternalSwap(ActorData_Inventory* other) {
  std::swap(slots_, other->slots_);
  item_.UnsafeArenaSwap(&other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Inventory_descriptor_;
  metadata.reflection = ActorData_Inventory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Character_AbilityScores::kSTRFieldNumber;
const int ActorData_Character_AbilityScores::kINTFieldNumber;
const int ActorData_Character_AbilityScores::kWISFieldNumber;
const int ActorData_Character_AbilityScores::kDEXFieldNumber;
const int ActorData_Character_AbilityScores::kCONFieldNumber;
const int ActorData_Character_AbilityScores::kCHAFieldNumber;
#endif  // !_MSC_VER

ActorData_Character_AbilityScores::ActorData_Character_AbilityScores()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Character.AbilityScores)
}

void ActorData_Character_AbilityScores::InitAsDefaultInstance() {
}

ActorData_Character_AbilityScores::ActorData_Character_AbilityScores(const ActorData_Character_AbilityScores& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Character.AbilityScores)
}

void ActorData_Character_AbilityScores::SharedCtor() {
  _cached_size_ = 0;
  str_ = 0;
  int__ = 0;
  wis_ = 0;
  dex_ = 0;
  con_ = 0;
  cha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Character_AbilityScores::~ActorData_Character_AbilityScores() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Character.AbilityScores)
  SharedDtor();
}

void ActorData_Character_AbilityScores::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Character_AbilityScores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Character_AbilityScores::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Character_AbilityScores_descriptor_;
}

const ActorData_Character_AbilityScores& ActorData_Character_AbilityScores::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Character_AbilityScores* ActorData_Character_AbilityScores::default_instance_ = NULL;

ActorData_Character_AbilityScores* ActorData_Character_AbilityScores::New(::google::protobuf::Arena* arena) const {
  ActorData_Character_AbilityScores* n = new ActorData_Character_AbilityScores;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Character_AbilityScores::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActorData_Character_AbilityScores*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(str_, cha_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Character_AbilityScores::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Character.AbilityScores)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 STR = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &str_)));
          set_has_str();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_INT;
        break;
      }

      // required int32 INT = 2;
      case 2: {
        if (tag == 16) {
         parse_INT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int__)));
          set_has_int_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WIS;
        break;
      }

      // required int32 WIS = 3;
      case 3: {
        if (tag == 24) {
         parse_WIS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wis_)));
          set_has_wis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DEX;
        break;
      }

      // required int32 DEX = 4;
      case 4: {
        if (tag == 32) {
         parse_DEX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CON;
        break;
      }

      // required int32 CON = 5;
      case 5: {
        if (tag == 40) {
         parse_CON:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CHA;
        break;
      }

      // required int32 CHA = 6;
      case 6: {
        if (tag == 48) {
         parse_CHA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cha_)));
          set_has_cha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Character.AbilityScores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Character.AbilityScores)
  return false;
#undef DO_
}

void ActorData_Character_AbilityScores::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Character.AbilityScores)
  // required int32 STR = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->str(), output);
  }

  // required int32 INT = 2;
  if (has_int_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_(), output);
  }

  // required int32 WIS = 3;
  if (has_wis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wis(), output);
  }

  // required int32 DEX = 4;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dex(), output);
  }

  // required int32 CON = 5;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->con(), output);
  }

  // required int32 CHA = 6;
  if (has_cha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Character.AbilityScores)
}

::google::protobuf::uint8* ActorData_Character_AbilityScores::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Character.AbilityScores)
  // required int32 STR = 1;
  if (has_str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->str(), target);
  }

  // required int32 INT = 2;
  if (has_int_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_(), target);
  }

  // required int32 WIS = 3;
  if (has_wis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wis(), target);
  }

  // required int32 DEX = 4;
  if (has_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dex(), target);
  }

  // required int32 CON = 5;
  if (has_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->con(), target);
  }

  // required int32 CHA = 6;
  if (has_cha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Character.AbilityScores)
  return target;
}

int ActorData_Character_AbilityScores::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_str()) {
    // required int32 STR = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->str());
  }

  if (has_int_()) {
    // required int32 INT = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int_());
  }

  if (has_wis()) {
    // required int32 WIS = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wis());
  }

  if (has_dex()) {
    // required int32 DEX = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dex());
  }

  if (has_con()) {
    // required int32 CON = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->con());
  }

  if (has_cha()) {
    // required int32 CHA = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cha());
  }

  return total_size;
}
int ActorData_Character_AbilityScores::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 STR = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->str());

    // required int32 INT = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->int_());

    // required int32 WIS = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wis());

    // required int32 DEX = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dex());

    // required int32 CON = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->con());

    // required int32 CHA = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cha());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Character_AbilityScores::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Character_AbilityScores* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Character_AbilityScores>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Character_AbilityScores::MergeFrom(const ActorData_Character_AbilityScores& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_int_()) {
      set_int_(from.int_());
    }
    if (from.has_wis()) {
      set_wis(from.wis());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
    if (from.has_cha()) {
      set_cha(from.cha());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Character_AbilityScores::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Character_AbilityScores::CopyFrom(const ActorData_Character_AbilityScores& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Character_AbilityScores::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ActorData_Character_AbilityScores::Swap(ActorData_Character_AbilityScores* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Character_AbilityScores::InternalSwap(ActorData_Character_AbilityScores* other) {
  std::swap(str_, other->str_);
  std::swap(int__, other->int__);
  std::swap(wis_, other->wis_);
  std::swap(dex_, other->dex_);
  std::swap(con_, other->con_);
  std::swap(cha_, other->cha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Character_AbilityScores::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Character_AbilityScores_descriptor_;
  metadata.reflection = ActorData_Character_AbilityScores_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Character_Spell::kIdFieldNumber;
#endif  // !_MSC_VER

ActorData_Character_Spell::ActorData_Character_Spell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Character.Spell)
}

void ActorData_Character_Spell::InitAsDefaultInstance() {
}

ActorData_Character_Spell::ActorData_Character_Spell(const ActorData_Character_Spell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Character.Spell)
}

void ActorData_Character_Spell::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Character_Spell::~ActorData_Character_Spell() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Character.Spell)
  SharedDtor();
}

void ActorData_Character_Spell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Character_Spell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Character_Spell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Character_Spell_descriptor_;
}

const ActorData_Character_Spell& ActorData_Character_Spell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Character_Spell* ActorData_Character_Spell::default_instance_ = NULL;

ActorData_Character_Spell* ActorData_Character_Spell::New(::google::protobuf::Arena* arena) const {
  ActorData_Character_Spell* n = new ActorData_Character_Spell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Character_Spell::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Character_Spell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Character.Spell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Character.Spell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Character.Spell)
  return false;
#undef DO_
}

void ActorData_Character_Spell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Character.Spell)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Character.Spell)
}

::google::protobuf::uint8* ActorData_Character_Spell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Character.Spell)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Character.Spell)
  return target;
}

int ActorData_Character_Spell::ByteSize() const {
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Character_Spell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Character_Spell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Character_Spell>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Character_Spell::MergeFrom(const ActorData_Character_Spell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Character_Spell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Character_Spell::CopyFrom(const ActorData_Character_Spell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Character_Spell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorData_Character_Spell::Swap(ActorData_Character_Spell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Character_Spell::InternalSwap(ActorData_Character_Spell* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Character_Spell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Character_Spell_descriptor_;
  metadata.reflection = ActorData_Character_Spell_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ActorData_Character::_default_damage_ = NULL;
#ifndef _MSC_VER
const int ActorData_Character::kLevelFieldNumber;
const int ActorData_Character::kClassFieldNumber;
const int ActorData_Character::kRaceFieldNumber;
const int ActorData_Character::kExperienceFieldNumber;
const int ActorData_Character::kArmorFieldNumber;
const int ActorData_Character::kSpeedFieldNumber;
const int ActorData_Character::kHpFieldNumber;
const int ActorData_Character::kMaxHpFieldNumber;
const int ActorData_Character::kHpBonusFieldNumber;
const int ActorData_Character::kDamageFieldNumber;
const int ActorData_Character::kMoraleFieldNumber;
const int ActorData_Character::kAbilityScoresFieldNumber;
const int ActorData_Character::kSpellsFieldNumber;
#endif  // !_MSC_VER

ActorData_Character::ActorData_Character()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Character)
}

void ActorData_Character::InitAsDefaultInstance() {
  abilityscores_ = const_cast< ::amarlon::proto::ActorData_Character_AbilityScores*>(&::amarlon::proto::ActorData_Character_AbilityScores::default_instance());
}

ActorData_Character::ActorData_Character(const ActorData_Character& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Character)
}

void ActorData_Character::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0;
  class__ = 0;
  race_ = 0;
  experience_ = 0;
  armor_ = 0;
  speed_ = 40;
  hp_ = 0;
  maxhp_ = 0;
  hpbonus_ = 0;
  damage_.UnsafeSetDefault(_default_damage_);
  morale_ = 0;
  abilityscores_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Character::~ActorData_Character() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Character)
  SharedDtor();
}

void ActorData_Character::SharedDtor() {
  damage_.DestroyNoArena(_default_damage_);
  if (this != default_instance_) {
    delete abilityscores_;
  }
}

void ActorData_Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Character_descriptor_;
}

const ActorData_Character& ActorData_Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Character* ActorData_Character::default_instance_ = NULL;

ActorData_Character* ActorData_Character::New(::google::protobuf::Arena* arena) const {
  ActorData_Character* n = new ActorData_Character;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Character::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActorData_Character*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(level_, armor_);
    ZR_(hp_, maxhp_);
    speed_ = 40;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(hpbonus_, morale_);
    if (has_damage()) {
      damage_.ClearToDefaultNoArena(_default_damage_);
    }
    if (has_abilityscores()) {
      if (abilityscores_ != NULL) abilityscores_->::amarlon::proto::ActorData_Character_AbilityScores::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  spells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Character)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_class;
        break;
      }

      // required int32 class = 2;
      case 2: {
        if (tag == 16) {
         parse_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class__)));
          set_has_class_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // required int32 race = 3;
      case 3: {
        if (tag == 24) {
         parse_race:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_experience;
        break;
      }

      // optional int32 experience = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_armor;
        break;
      }

      // optional int32 armor = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6 [default = 40];
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }

      // optional int32 hp = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxHp;
        break;
      }

      // optional int32 maxHp = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_maxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hpBonus;
        break;
      }

      // optional int32 hpBonus = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_hpBonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpbonus_)));
          set_has_hpbonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_damage;
        break;
      }

      // optional string damage = 10 [default = "0d0+0#0"];
      case 10: {
        if (tag == 82) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage().data(), this->damage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.Character.damage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_morale;
        break;
      }

      // optional int32 morale = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_morale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &morale_)));
          set_has_morale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_abilityScores;
        break;
      }

      // optional .amarlon.proto.ActorData.Character.AbilityScores abilityScores = 12;
      case 12: {
        if (tag == 98) {
         parse_abilityScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abilityscores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_spells;
        break;
      }

      // repeated .amarlon.proto.ActorData.Character.Spell spells = 13;
      case 13: {
        if (tag == 106) {
         parse_spells:
          DO_(input->IncrementRecursionDepth());
         parse_loop_spells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_spells;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Character)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Character)
  return false;
#undef DO_
}

void ActorData_Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Character)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 class = 2;
  if (has_class_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_(), output);
  }

  // required int32 race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // optional int32 experience = 4 [default = 0];
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->experience(), output);
  }

  // optional int32 armor = 5 [default = 0];
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->armor(), output);
  }

  // optional int32 speed = 6 [default = 40];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int32 hp = 7 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }

  // optional int32 maxHp = 8 [default = 0];
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxhp(), output);
  }

  // optional int32 hpBonus = 9 [default = 0];
  if (has_hpbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hpbonus(), output);
  }

  // optional string damage = 10 [default = "0d0+0#0"];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage().data(), this->damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.Character.damage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->damage(), output);
  }

  // optional int32 morale = 11 [default = 0];
  if (has_morale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->morale(), output);
  }

  // optional .amarlon.proto.ActorData.Character.AbilityScores abilityScores = 12;
  if (has_abilityscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->abilityscores_, output);
  }

  // repeated .amarlon.proto.ActorData.Character.Spell spells = 13;
  for (unsigned int i = 0, n = this->spells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spells(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Character)
}

::google::protobuf::uint8* ActorData_Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Character)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 class = 2;
  if (has_class_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_(), target);
  }

  // required int32 race = 3;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->race(), target);
  }

  // optional int32 experience = 4 [default = 0];
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->experience(), target);
  }

  // optional int32 armor = 5 [default = 0];
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->armor(), target);
  }

  // optional int32 speed = 6 [default = 40];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int32 hp = 7 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }

  // optional int32 maxHp = 8 [default = 0];
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxhp(), target);
  }

  // optional int32 hpBonus = 9 [default = 0];
  if (has_hpbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hpbonus(), target);
  }

  // optional string damage = 10 [default = "0d0+0#0"];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage().data(), this->damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.Character.damage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->damage(), target);
  }

  // optional int32 morale = 11 [default = 0];
  if (has_morale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->morale(), target);
  }

  // optional .amarlon.proto.ActorData.Character.AbilityScores abilityScores = 12;
  if (has_abilityscores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->abilityscores_, target);
  }

  // repeated .amarlon.proto.ActorData.Character.Spell spells = 13;
  for (unsigned int i = 0, n = this->spells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spells(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Character)
  return target;
}

int ActorData_Character::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_level()) {
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_class_()) {
    // required int32 class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->class_());
  }

  if (has_race()) {
    // required int32 race = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->race());
  }

  return total_size;
}
int ActorData_Character::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 level = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 class = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->class_());

    // required int32 race = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->race());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional int32 experience = 4 [default = 0];
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 armor = 5 [default = 0];
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional int32 speed = 6 [default = 40];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 hp = 7 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 maxHp = 8 [default = 0];
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 hpBonus = 9 [default = 0];
    if (has_hpbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpbonus());
    }

    // optional string damage = 10 [default = "0d0+0#0"];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage());
    }

    // optional int32 morale = 11 [default = 0];
    if (has_morale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->morale());
    }

    // optional .amarlon.proto.ActorData.Character.AbilityScores abilityScores = 12;
    if (has_abilityscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->abilityscores_);
    }

  }
  // repeated .amarlon.proto.ActorData.Character.Spell spells = 13;
  total_size += 1 * this->spells_size();
  for (int i = 0; i < this->spells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Character::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Character* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Character>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Character::MergeFrom(const ActorData_Character& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  spells_.MergeFrom(from.spells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_class_()) {
      set_class_(from.class_());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hpbonus()) {
      set_hpbonus(from.hpbonus());
    }
    if (from.has_damage()) {
      set_has_damage();
      damage_.AssignWithDefault(_default_damage_, from.damage_);
    }
    if (from.has_morale()) {
      set_morale(from.morale());
    }
    if (from.has_abilityscores()) {
      mutable_abilityscores()->::amarlon::proto::ActorData_Character_AbilityScores::MergeFrom(from.abilityscores());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Character::CopyFrom(const ActorData_Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Character::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_abilityscores()) {
    if (!this->abilityscores_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->spells())) return false;
  return true;
}

void ActorData_Character::Swap(ActorData_Character* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Character::InternalSwap(ActorData_Character* other) {
  std::swap(level_, other->level_);
  std::swap(class__, other->class__);
  std::swap(race_, other->race_);
  std::swap(experience_, other->experience_);
  std::swap(armor_, other->armor_);
  std::swap(speed_, other->speed_);
  std::swap(hp_, other->hp_);
  std::swap(maxhp_, other->maxhp_);
  std::swap(hpbonus_, other->hpbonus_);
  damage_.Swap(&other->damage_);
  std::swap(morale_, other->morale_);
  std::swap(abilityscores_, other->abilityscores_);
  spells_.UnsafeArenaSwap(&other->spells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Character_descriptor_;
  metadata.reflection = ActorData_Character_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Destroyable_DropRule::kItemIdFieldNumber;
const int ActorData_Destroyable_DropRule::kMinFieldNumber;
const int ActorData_Destroyable_DropRule::kMaxFieldNumber;
const int ActorData_Destroyable_DropRule::kChanceFieldNumber;
#endif  // !_MSC_VER

ActorData_Destroyable_DropRule::ActorData_Destroyable_DropRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Destroyable.DropRule)
}

void ActorData_Destroyable_DropRule::InitAsDefaultInstance() {
}

ActorData_Destroyable_DropRule::ActorData_Destroyable_DropRule(const ActorData_Destroyable_DropRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Destroyable.DropRule)
}

void ActorData_Destroyable_DropRule::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  min_ = 1;
  max_ = 1;
  chance_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Destroyable_DropRule::~ActorData_Destroyable_DropRule() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Destroyable.DropRule)
  SharedDtor();
}

void ActorData_Destroyable_DropRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Destroyable_DropRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Destroyable_DropRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Destroyable_DropRule_descriptor_;
}

const ActorData_Destroyable_DropRule& ActorData_Destroyable_DropRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Destroyable_DropRule* ActorData_Destroyable_DropRule::default_instance_ = NULL;

ActorData_Destroyable_DropRule* ActorData_Destroyable_DropRule::New(::google::protobuf::Arena* arena) const {
  ActorData_Destroyable_DropRule* n = new ActorData_Destroyable_DropRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Destroyable_DropRule::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    itemid_ = 0;
    min_ = 1;
    max_ = 1;
    chance_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Destroyable_DropRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Destroyable.DropRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min;
        break;
      }

      // optional int32 min = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // optional int32 max = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_chance;
        break;
      }

      // optional float chance = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Destroyable.DropRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Destroyable.DropRule)
  return false;
#undef DO_
}

void ActorData_Destroyable_DropRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Destroyable.DropRule)
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 min = 2 [default = 1];
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // optional int32 max = 3 [default = 1];
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  // optional float chance = 4 [default = 1];
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->chance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Destroyable.DropRule)
}

::google::protobuf::uint8* ActorData_Destroyable_DropRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Destroyable.DropRule)
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 min = 2 [default = 1];
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min(), target);
  }

  // optional int32 max = 3 [default = 1];
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max(), target);
  }

  // optional float chance = 4 [default = 1];
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->chance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Destroyable.DropRule)
  return target;
}

int ActorData_Destroyable_DropRule::ByteSize() const {
  int total_size = 0;

  // required int32 itemId = 1;
  if (has_itemid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemid());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 min = 2 [default = 1];
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 3 [default = 1];
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

    // optional float chance = 4 [default = 1];
    if (has_chance()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Destroyable_DropRule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Destroyable_DropRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Destroyable_DropRule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Destroyable_DropRule::MergeFrom(const ActorData_Destroyable_DropRule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_chance()) {
      set_chance(from.chance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Destroyable_DropRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Destroyable_DropRule::CopyFrom(const ActorData_Destroyable_DropRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Destroyable_DropRule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorData_Destroyable_DropRule::Swap(ActorData_Destroyable_DropRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Destroyable_DropRule::InternalSwap(ActorData_Destroyable_DropRule* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(chance_, other->chance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Destroyable_DropRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Destroyable_DropRule_descriptor_;
  metadata.reflection = ActorData_Destroyable_DropRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActorData_Destroyable::ActorData_Destroyable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Destroyable)
}

void ActorData_Destroyable::InitAsDefaultInstance() {
}

ActorData_Destroyable::ActorData_Destroyable(const ActorData_Destroyable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Destroyable)
}

void ActorData_Destroyable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Destroyable::~ActorData_Destroyable() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Destroyable)
  SharedDtor();
}

void ActorData_Destroyable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Destroyable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Destroyable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Destroyable_descriptor_;
}

const ActorData_Destroyable& ActorData_Destroyable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Destroyable* ActorData_Destroyable::default_instance_ = NULL;

ActorData_Destroyable* ActorData_Destroyable::New(::google::protobuf::Arena* arena) const {
  ActorData_Destroyable* n = new ActorData_Destroyable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Destroyable::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Destroyable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Destroyable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Destroyable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Destroyable)
  return false;
#undef DO_
}

void ActorData_Destroyable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Destroyable)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Destroyable)
}

::google::protobuf::uint8* ActorData_Destroyable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Destroyable)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Destroyable)
  return target;
}

int ActorData_Destroyable::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Destroyable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Destroyable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Destroyable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Destroyable::MergeFrom(const ActorData_Destroyable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Destroyable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Destroyable::CopyFrom(const ActorData_Destroyable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Destroyable::IsInitialized() const {

  return true;
}

void ActorData_Destroyable::Swap(ActorData_Destroyable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Destroyable::InternalSwap(ActorData_Destroyable* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Destroyable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Destroyable_descriptor_;
  metadata.reflection = ActorData_Destroyable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Wearer_ItemSlot::kIdFieldNumber;
const int ActorData_Wearer_ItemSlot::kItemFieldNumber;
#endif  // !_MSC_VER

ActorData_Wearer_ItemSlot::ActorData_Wearer_ItemSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Wearer.ItemSlot)
}

void ActorData_Wearer_ItemSlot::InitAsDefaultInstance() {
  item_ = const_cast< ::amarlon::proto::ActorData*>(&::amarlon::proto::ActorData::default_instance());
}

ActorData_Wearer_ItemSlot::ActorData_Wearer_ItemSlot(const ActorData_Wearer_ItemSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Wearer.ItemSlot)
}

void ActorData_Wearer_ItemSlot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Wearer_ItemSlot::~ActorData_Wearer_ItemSlot() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Wearer.ItemSlot)
  SharedDtor();
}

void ActorData_Wearer_ItemSlot::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ActorData_Wearer_ItemSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Wearer_ItemSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Wearer_ItemSlot_descriptor_;
}

const ActorData_Wearer_ItemSlot& ActorData_Wearer_ItemSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Wearer_ItemSlot* ActorData_Wearer_ItemSlot::default_instance_ = NULL;

ActorData_Wearer_ItemSlot* ActorData_Wearer_ItemSlot::New(::google::protobuf::Arena* arena) const {
  ActorData_Wearer_ItemSlot* n = new ActorData_Wearer_ItemSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Wearer_ItemSlot::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::amarlon::proto::ActorData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Wearer_ItemSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Wearer.ItemSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .amarlon.proto.ActorData item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Wearer.ItemSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Wearer.ItemSlot)
  return false;
#undef DO_
}

void ActorData_Wearer_ItemSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Wearer.ItemSlot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .amarlon.proto.ActorData item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Wearer.ItemSlot)
}

::google::protobuf::uint8* ActorData_Wearer_ItemSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Wearer.ItemSlot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .amarlon.proto.ActorData item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->item_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Wearer.ItemSlot)
  return target;
}

int ActorData_Wearer_ItemSlot::ByteSize() const {
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional .amarlon.proto.ActorData item = 2;
  if (has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Wearer_ItemSlot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Wearer_ItemSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Wearer_ItemSlot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Wearer_ItemSlot::MergeFrom(const ActorData_Wearer_ItemSlot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item()) {
      mutable_item()->::amarlon::proto::ActorData::MergeFrom(from.item());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Wearer_ItemSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Wearer_ItemSlot::CopyFrom(const ActorData_Wearer_ItemSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Wearer_ItemSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  return true;
}

void ActorData_Wearer_ItemSlot::Swap(ActorData_Wearer_ItemSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Wearer_ItemSlot::InternalSwap(ActorData_Wearer_ItemSlot* other) {
  std::swap(id_, other->id_);
  std::swap(item_, other->item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Wearer_ItemSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Wearer_ItemSlot_descriptor_;
  metadata.reflection = ActorData_Wearer_ItemSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Wearer::kItemSlotsFieldNumber;
#endif  // !_MSC_VER

ActorData_Wearer::ActorData_Wearer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Wearer)
}

void ActorData_Wearer::InitAsDefaultInstance() {
}

ActorData_Wearer::ActorData_Wearer(const ActorData_Wearer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Wearer)
}

void ActorData_Wearer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Wearer::~ActorData_Wearer() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Wearer)
  SharedDtor();
}

void ActorData_Wearer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Wearer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Wearer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Wearer_descriptor_;
}

const ActorData_Wearer& ActorData_Wearer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Wearer* ActorData_Wearer::default_instance_ = NULL;

ActorData_Wearer* ActorData_Wearer::New(::google::protobuf::Arena* arena) const {
  ActorData_Wearer* n = new ActorData_Wearer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Wearer::Clear() {
  itemslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Wearer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Wearer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.proto.ActorData.Wearer.ItemSlot itemSlots = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itemslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_itemSlots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Wearer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Wearer)
  return false;
#undef DO_
}

void ActorData_Wearer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Wearer)
  // repeated .amarlon.proto.ActorData.Wearer.ItemSlot itemSlots = 1;
  for (unsigned int i = 0, n = this->itemslots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemslots(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Wearer)
}

::google::protobuf::uint8* ActorData_Wearer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Wearer)
  // repeated .amarlon.proto.ActorData.Wearer.ItemSlot itemSlots = 1;
  for (unsigned int i = 0, n = this->itemslots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemslots(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Wearer)
  return target;
}

int ActorData_Wearer::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.proto.ActorData.Wearer.ItemSlot itemSlots = 1;
  total_size += 1 * this->itemslots_size();
  for (int i = 0; i < this->itemslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemslots(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Wearer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Wearer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Wearer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Wearer::MergeFrom(const ActorData_Wearer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  itemslots_.MergeFrom(from.itemslots_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Wearer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Wearer::CopyFrom(const ActorData_Wearer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Wearer::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->itemslots())) return false;
  return true;
}

void ActorData_Wearer::Swap(ActorData_Wearer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Wearer::InternalSwap(ActorData_Wearer* other) {
  itemslots_.UnsafeArenaSwap(&other->itemslots_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Wearer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Wearer_descriptor_;
  metadata.reflection = ActorData_Wearer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Ai::kTypeFieldNumber;
#endif  // !_MSC_VER

ActorData_Ai::ActorData_Ai()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Ai)
}

void ActorData_Ai::InitAsDefaultInstance() {
}

ActorData_Ai::ActorData_Ai(const ActorData_Ai& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Ai)
}

void ActorData_Ai::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Ai::~ActorData_Ai() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Ai)
  SharedDtor();
}

void ActorData_Ai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Ai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Ai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Ai_descriptor_;
}

const ActorData_Ai& ActorData_Ai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Ai* ActorData_Ai::default_instance_ = NULL;

ActorData_Ai* ActorData_Ai::New(::google::protobuf::Arena* arena) const {
  ActorData_Ai* n = new ActorData_Ai;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Ai::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Ai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Ai)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Ai)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Ai)
  return false;
#undef DO_
}

void ActorData_Ai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Ai)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Ai)
}

::google::protobuf::uint8* ActorData_Ai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Ai)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Ai)
  return target;
}

int ActorData_Ai::ByteSize() const {
  int total_size = 0;

  // required int32 type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Ai::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Ai* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Ai>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Ai::MergeFrom(const ActorData_Ai& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Ai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Ai::CopyFrom(const ActorData_Ai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Ai::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorData_Ai::Swap(ActorData_Ai* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Ai::InternalSwap(ActorData_Ai* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Ai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Ai_descriptor_;
  metadata.reflection = ActorData_Ai_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ActorData_Openable::kScriptIdFieldNumber;
#endif  // !_MSC_VER

ActorData_Openable::ActorData_Openable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Openable)
}

void ActorData_Openable::InitAsDefaultInstance() {
}

ActorData_Openable::ActorData_Openable(const ActorData_Openable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Openable)
}

void ActorData_Openable::SharedCtor() {
  _cached_size_ = 0;
  scriptid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Openable::~ActorData_Openable() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Openable)
  SharedDtor();
}

void ActorData_Openable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorData_Openable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Openable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Openable_descriptor_;
}

const ActorData_Openable& ActorData_Openable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Openable* ActorData_Openable::default_instance_ = NULL;

ActorData_Openable* ActorData_Openable::New(::google::protobuf::Arena* arena) const {
  ActorData_Openable* n = new ActorData_Openable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Openable::Clear() {
  scriptid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Openable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Openable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scriptId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scriptid_)));
          set_has_scriptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Openable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Openable)
  return false;
#undef DO_
}

void ActorData_Openable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Openable)
  // required int32 scriptId = 1;
  if (has_scriptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scriptid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Openable)
}

::google::protobuf::uint8* ActorData_Openable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Openable)
  // required int32 scriptId = 1;
  if (has_scriptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scriptid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Openable)
  return target;
}

int ActorData_Openable::ByteSize() const {
  int total_size = 0;

  // required int32 scriptId = 1;
  if (has_scriptid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scriptid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Openable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Openable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Openable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Openable::MergeFrom(const ActorData_Openable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scriptid()) {
      set_scriptid(from.scriptid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Openable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Openable::CopyFrom(const ActorData_Openable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Openable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorData_Openable::Swap(ActorData_Openable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Openable::InternalSwap(ActorData_Openable* other) {
  std::swap(scriptid_, other->scriptid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Openable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Openable_descriptor_;
  metadata.reflection = ActorData_Openable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ActorData_Pickable::_default_damage_ = NULL;
#ifndef _MSC_VER
const int ActorData_Pickable::kStackableFieldNumber;
const int ActorData_Pickable::kAmountFieldNumber;
const int ActorData_Pickable::kUsesFieldNumber;
const int ActorData_Pickable::kItemSlotFieldNumber;
const int ActorData_Pickable::kCategoryFieldNumber;
const int ActorData_Pickable::kArmorFieldNumber;
const int ActorData_Pickable::kWeightFieldNumber;
const int ActorData_Pickable::kPriceFieldNumber;
const int ActorData_Pickable::kTargetFieldNumber;
const int ActorData_Pickable::kDamageFieldNumber;
const int ActorData_Pickable::kScriptIdFieldNumber;
#endif  // !_MSC_VER

ActorData_Pickable::ActorData_Pickable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData.Pickable)
}

void ActorData_Pickable::InitAsDefaultInstance() {
}

ActorData_Pickable::ActorData_Pickable(const ActorData_Pickable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData.Pickable)
}

void ActorData_Pickable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stackable_ = false;
  amount_ = 1;
  uses_ = 0;
  itemslot_ = 0;
  category_ = 0;
  armor_ = 0;
  weight_ = 0;
  price_ = 0;
  target_ = 0;
  damage_.UnsafeSetDefault(_default_damage_);
  scriptid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData_Pickable::~ActorData_Pickable() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData.Pickable)
  SharedDtor();
}

void ActorData_Pickable::SharedDtor() {
  damage_.DestroyNoArena(_default_damage_);
  if (this != default_instance_) {
  }
}

void ActorData_Pickable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData_Pickable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_Pickable_descriptor_;
}

const ActorData_Pickable& ActorData_Pickable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData_Pickable* ActorData_Pickable::default_instance_ = NULL;

ActorData_Pickable* ActorData_Pickable::New(::google::protobuf::Arena* arena) const {
  ActorData_Pickable* n = new ActorData_Pickable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData_Pickable::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActorData_Pickable*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(uses_, price_);
    stackable_ = false;
    amount_ = 1;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(target_, scriptid_);
    if (has_damage()) {
      damage_.ClearToDefaultNoArena(_default_damage_);
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData_Pickable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData.Pickable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool stackable = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stackable_)));
          set_has_stackable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uses;
        break;
      }

      // optional int32 uses = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_uses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uses_)));
          set_has_uses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemSlot;
        break;
      }

      // optional int32 itemSlot = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemslot_)));
          set_has_itemslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_category;
        break;
      }

      // optional int32 category = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_armor;
        break;
      }

      // optional int32 armor = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_weight;
        break;
      }

      // optional int32 weight = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }

      // optional int32 price = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_target;
        break;
      }

      // optional int32 target = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_damage;
        break;
      }

      // optional string damage = 10 [default = "0d0+0#0"];
      case 10: {
        if (tag == 82) {
         parse_damage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage().data(), this->damage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.Pickable.damage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_scriptId;
        break;
      }

      // optional int32 scriptId = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_scriptId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scriptid_)));
          set_has_scriptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData.Pickable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData.Pickable)
  return false;
#undef DO_
}

void ActorData_Pickable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData.Pickable)
  // optional bool stackable = 1 [default = false];
  if (has_stackable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stackable(), output);
  }

  // optional int32 amount = 2 [default = 1];
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional int32 uses = 3 [default = 0];
  if (has_uses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uses(), output);
  }

  // optional int32 itemSlot = 4 [default = 0];
  if (has_itemslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemslot(), output);
  }

  // optional int32 category = 5 [default = 0];
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->category(), output);
  }

  // optional int32 armor = 6 [default = 0];
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->armor(), output);
  }

  // optional int32 weight = 7 [default = 0];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weight(), output);
  }

  // optional int32 price = 8 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price(), output);
  }

  // optional int32 target = 9 [default = 0];
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->target(), output);
  }

  // optional string damage = 10 [default = "0d0+0#0"];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage().data(), this->damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.Pickable.damage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->damage(), output);
  }

  // optional int32 scriptId = 11 [default = 0];
  if (has_scriptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->scriptid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData.Pickable)
}

::google::protobuf::uint8* ActorData_Pickable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData.Pickable)
  // optional bool stackable = 1 [default = false];
  if (has_stackable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stackable(), target);
  }

  // optional int32 amount = 2 [default = 1];
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // optional int32 uses = 3 [default = 0];
  if (has_uses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uses(), target);
  }

  // optional int32 itemSlot = 4 [default = 0];
  if (has_itemslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemslot(), target);
  }

  // optional int32 category = 5 [default = 0];
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->category(), target);
  }

  // optional int32 armor = 6 [default = 0];
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->armor(), target);
  }

  // optional int32 weight = 7 [default = 0];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->weight(), target);
  }

  // optional int32 price = 8 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price(), target);
  }

  // optional int32 target = 9 [default = 0];
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->target(), target);
  }

  // optional string damage = 10 [default = "0d0+0#0"];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage().data(), this->damage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.Pickable.damage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->damage(), target);
  }

  // optional int32 scriptId = 11 [default = 0];
  if (has_scriptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->scriptid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData.Pickable)
  return target;
}

int ActorData_Pickable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool stackable = 1 [default = false];
    if (has_stackable()) {
      total_size += 1 + 1;
    }

    // optional int32 amount = 2 [default = 1];
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 uses = 3 [default = 0];
    if (has_uses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uses());
    }

    // optional int32 itemSlot = 4 [default = 0];
    if (has_itemslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemslot());
    }

    // optional int32 category = 5 [default = 0];
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 armor = 6 [default = 0];
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional int32 weight = 7 [default = 0];
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 price = 8 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 target = 9 [default = 0];
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional string damage = 10 [default = "0d0+0#0"];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage());
    }

    // optional int32 scriptId = 11 [default = 0];
    if (has_scriptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scriptid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData_Pickable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData_Pickable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData_Pickable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData_Pickable::MergeFrom(const ActorData_Pickable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stackable()) {
      set_stackable(from.stackable());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_uses()) {
      set_uses(from.uses());
    }
    if (from.has_itemslot()) {
      set_itemslot(from.itemslot());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_damage()) {
      set_has_damage();
      damage_.AssignWithDefault(_default_damage_, from.damage_);
    }
    if (from.has_scriptid()) {
      set_scriptid(from.scriptid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData_Pickable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData_Pickable::CopyFrom(const ActorData_Pickable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData_Pickable::IsInitialized() const {

  return true;
}

void ActorData_Pickable::Swap(ActorData_Pickable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData_Pickable::InternalSwap(ActorData_Pickable* other) {
  std::swap(stackable_, other->stackable_);
  std::swap(amount_, other->amount_);
  std::swap(uses_, other->uses_);
  std::swap(itemslot_, other->itemslot_);
  std::swap(category_, other->category_);
  std::swap(armor_, other->armor_);
  std::swap(weight_, other->weight_);
  std::swap(price_, other->price_);
  std::swap(target_, other->target_);
  damage_.Swap(&other->damage_);
  std::swap(scriptid_, other->scriptid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData_Pickable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_Pickable_descriptor_;
  metadata.reflection = ActorData_Pickable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* ActorData::_default_symbol_ = NULL;
::std::string* ActorData::_default_color_ = NULL;
#ifndef _MSC_VER
const int ActorData::kIdFieldNumber;
const int ActorData::kNameFieldNumber;
const int ActorData::kSymbolFieldNumber;
const int ActorData::kColorFieldNumber;
const int ActorData::kBlocksFieldNumber;
const int ActorData::kFovOnlyFieldNumber;
const int ActorData::kDescriptionFieldNumber;
const int ActorData::kInventoryFieldNumber;
const int ActorData::kCharacterFieldNumber;
const int ActorData::kDestroyableFieldNumber;
const int ActorData::kWearerFieldNumber;
const int ActorData::kAiFieldNumber;
const int ActorData::kOpenableFieldNumber;
const int ActorData::kPickableFieldNumber;
#endif  // !_MSC_VER

ActorData::ActorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorData)
}

void ActorData::InitAsDefaultInstance() {
  inventory_ = const_cast< ::amarlon::proto::ActorData_Inventory*>(&::amarlon::proto::ActorData_Inventory::default_instance());
  character_ = const_cast< ::amarlon::proto::ActorData_Character*>(&::amarlon::proto::ActorData_Character::default_instance());
  destroyable_ = const_cast< ::amarlon::proto::ActorData_Destroyable*>(&::amarlon::proto::ActorData_Destroyable::default_instance());
  wearer_ = const_cast< ::amarlon::proto::ActorData_Wearer*>(&::amarlon::proto::ActorData_Wearer::default_instance());
  ai_ = const_cast< ::amarlon::proto::ActorData_Ai*>(&::amarlon::proto::ActorData_Ai::default_instance());
  openable_ = const_cast< ::amarlon::proto::ActorData_Openable*>(&::amarlon::proto::ActorData_Openable::default_instance());
  pickable_ = const_cast< ::amarlon::proto::ActorData_Pickable*>(&::amarlon::proto::ActorData_Pickable::default_instance());
}

ActorData::ActorData(const ActorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorData)
}

void ActorData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(_default_symbol_);
  color_.UnsafeSetDefault(_default_color_);
  blocks_ = true;
  fovonly_ = true;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inventory_ = NULL;
  character_ = NULL;
  destroyable_ = NULL;
  wearer_ = NULL;
  ai_ = NULL;
  openable_ = NULL;
  pickable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorData::~ActorData() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorData)
  SharedDtor();
}

void ActorData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(_default_symbol_);
  color_.DestroyNoArena(_default_color_);
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete inventory_;
    delete character_;
    delete destroyable_;
    delete wearer_;
    delete ai_;
    delete openable_;
    delete pickable_;
  }
}

void ActorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorData_descriptor_;
}

const ActorData& ActorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorData* ActorData::default_instance_ = NULL;

ActorData* ActorData::New(::google::protobuf::Arena* arena) const {
  ActorData* n = new ActorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorData::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_symbol()) {
      symbol_.ClearToDefaultNoArena(_default_symbol_);
    }
    if (has_color()) {
      color_.ClearToDefaultNoArena(_default_color_);
    }
    blocks_ = true;
    fovonly_ = true;
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_inventory()) {
      if (inventory_ != NULL) inventory_->::amarlon::proto::ActorData_Inventory::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_character()) {
      if (character_ != NULL) character_->::amarlon::proto::ActorData_Character::Clear();
    }
    if (has_destroyable()) {
      if (destroyable_ != NULL) destroyable_->::amarlon::proto::ActorData_Destroyable::Clear();
    }
    if (has_wearer()) {
      if (wearer_ != NULL) wearer_->::amarlon::proto::ActorData_Wearer::Clear();
    }
    if (has_ai()) {
      if (ai_ != NULL) ai_->::amarlon::proto::ActorData_Ai::Clear();
    }
    if (has_openable()) {
      if (openable_ != NULL) openable_->::amarlon::proto::ActorData_Openable::Clear();
    }
    if (has_pickable()) {
      if (pickable_ != NULL) pickable_->::amarlon::proto::ActorData_Pickable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // optional string symbol = 3 [default = "@"];
      case 3: {
        if (tag == 26) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // optional string color = 4 [default = "ffffff"];
      case 4: {
        if (tag == 34) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blocks;
        break;
      }

      // optional bool blocks = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blocks_)));
          set_has_blocks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fovOnly;
        break;
      }

      // optional bool fovOnly = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_fovOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fovonly_)));
          set_has_fovonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.proto.ActorData.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_inventory;
        break;
      }

      // optional .amarlon.proto.ActorData.Inventory inventory = 8;
      case 8: {
        if (tag == 66) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_character;
        break;
      }

      // optional .amarlon.proto.ActorData.Character character = 9;
      case 9: {
        if (tag == 74) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destroyable;
        break;
      }

      // optional .amarlon.proto.ActorData.Destroyable destroyable = 10;
      case 10: {
        if (tag == 82) {
         parse_destroyable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroyable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wearer;
        break;
      }

      // optional .amarlon.proto.ActorData.Wearer wearer = 11;
      case 11: {
        if (tag == 90) {
         parse_wearer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wearer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ai;
        break;
      }

      // optional .amarlon.proto.ActorData.Ai ai = 12;
      case 12: {
        if (tag == 98) {
         parse_ai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ai()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_openable;
        break;
      }

      // optional .amarlon.proto.ActorData.Openable openable = 13;
      case 13: {
        if (tag == 106) {
         parse_openable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_pickable;
        break;
      }

      // optional .amarlon.proto.ActorData.Pickable pickable = 14;
      case 14: {
        if (tag == 114) {
         parse_pickable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pickable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorData)
  return false;
#undef DO_
}

void ActorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorData)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string symbol = 3 [default = "@"];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string color = 4 [default = "ffffff"];
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  // optional bool blocks = 5 [default = true];
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blocks(), output);
  }

  // optional bool fovOnly = 6 [default = true];
  if (has_fovonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fovonly(), output);
  }

  // optional string description = 7 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // optional .amarlon.proto.ActorData.Inventory inventory = 8;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->inventory_, output);
  }

  // optional .amarlon.proto.ActorData.Character character = 9;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->character_, output);
  }

  // optional .amarlon.proto.ActorData.Destroyable destroyable = 10;
  if (has_destroyable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->destroyable_, output);
  }

  // optional .amarlon.proto.ActorData.Wearer wearer = 11;
  if (has_wearer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->wearer_, output);
  }

  // optional .amarlon.proto.ActorData.Ai ai = 12;
  if (has_ai()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->ai_, output);
  }

  // optional .amarlon.proto.ActorData.Openable openable = 13;
  if (has_openable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->openable_, output);
  }

  // optional .amarlon.proto.ActorData.Pickable pickable = 14;
  if (has_pickable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->pickable_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorData)
}

::google::protobuf::uint8* ActorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorData)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string symbol = 3 [default = "@"];
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string color = 4 [default = "ffffff"];
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // optional bool blocks = 5 [default = true];
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blocks(), target);
  }

  // optional bool fovOnly = 6 [default = true];
  if (has_fovonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->fovonly(), target);
  }

  // optional string description = 7 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.proto.ActorData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // optional .amarlon.proto.ActorData.Inventory inventory = 8;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->inventory_, target);
  }

  // optional .amarlon.proto.ActorData.Character character = 9;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->character_, target);
  }

  // optional .amarlon.proto.ActorData.Destroyable destroyable = 10;
  if (has_destroyable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->destroyable_, target);
  }

  // optional .amarlon.proto.ActorData.Wearer wearer = 11;
  if (has_wearer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->wearer_, target);
  }

  // optional .amarlon.proto.ActorData.Ai ai = 12;
  if (has_ai()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->ai_, target);
  }

  // optional .amarlon.proto.ActorData.Openable openable = 13;
  if (has_openable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->openable_, target);
  }

  // optional .amarlon.proto.ActorData.Pickable pickable = 14;
  if (has_pickable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->pickable_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorData)
  return target;
}

int ActorData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int ActorData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string symbol = 3 [default = "@"];
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string color = 4 [default = "ffffff"];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional bool blocks = 5 [default = true];
    if (has_blocks()) {
      total_size += 1 + 1;
    }

    // optional bool fovOnly = 6 [default = true];
    if (has_fovonly()) {
      total_size += 1 + 1;
    }

    // optional string description = 7 [default = ""];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .amarlon.proto.ActorData.Inventory inventory = 8;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inventory_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .amarlon.proto.ActorData.Character character = 9;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->character_);
    }

    // optional .amarlon.proto.ActorData.Destroyable destroyable = 10;
    if (has_destroyable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroyable_);
    }

    // optional .amarlon.proto.ActorData.Wearer wearer = 11;
    if (has_wearer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wearer_);
    }

    // optional .amarlon.proto.ActorData.Ai ai = 12;
    if (has_ai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ai_);
    }

    // optional .amarlon.proto.ActorData.Openable openable = 13;
    if (has_openable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->openable_);
    }

    // optional .amarlon.proto.ActorData.Pickable pickable = 14;
    if (has_pickable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pickable_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorData::MergeFrom(const ActorData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(_default_symbol_, from.symbol_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(_default_color_, from.color_);
    }
    if (from.has_blocks()) {
      set_blocks(from.blocks());
    }
    if (from.has_fovonly()) {
      set_fovonly(from.fovonly());
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_inventory()) {
      mutable_inventory()->::amarlon::proto::ActorData_Inventory::MergeFrom(from.inventory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_character()) {
      mutable_character()->::amarlon::proto::ActorData_Character::MergeFrom(from.character());
    }
    if (from.has_destroyable()) {
      mutable_destroyable()->::amarlon::proto::ActorData_Destroyable::MergeFrom(from.destroyable());
    }
    if (from.has_wearer()) {
      mutable_wearer()->::amarlon::proto::ActorData_Wearer::MergeFrom(from.wearer());
    }
    if (from.has_ai()) {
      mutable_ai()->::amarlon::proto::ActorData_Ai::MergeFrom(from.ai());
    }
    if (from.has_openable()) {
      mutable_openable()->::amarlon::proto::ActorData_Openable::MergeFrom(from.openable());
    }
    if (from.has_pickable()) {
      mutable_pickable()->::amarlon::proto::ActorData_Pickable::MergeFrom(from.pickable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorData::CopyFrom(const ActorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_inventory()) {
    if (!this->inventory_->IsInitialized()) return false;
  }
  if (has_character()) {
    if (!this->character_->IsInitialized()) return false;
  }
  if (has_wearer()) {
    if (!this->wearer_->IsInitialized()) return false;
  }
  if (has_ai()) {
    if (!this->ai_->IsInitialized()) return false;
  }
  if (has_openable()) {
    if (!this->openable_->IsInitialized()) return false;
  }
  return true;
}

void ActorData::Swap(ActorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorData::InternalSwap(ActorData* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  symbol_.Swap(&other->symbol_);
  color_.Swap(&other->color_);
  std::swap(blocks_, other->blocks_);
  std::swap(fovonly_, other->fovonly_);
  description_.Swap(&other->description_);
  std::swap(inventory_, other->inventory_);
  std::swap(character_, other->character_);
  std::swap(destroyable_, other->destroyable_);
  std::swap(wearer_, other->wearer_);
  std::swap(ai_, other->ai_);
  std::swap(openable_, other->openable_);
  std::swap(pickable_, other->pickable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorData_descriptor_;
  metadata.reflection = ActorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActorData_Inventory

// optional int32 slots = 1 [default = 20];
bool ActorData_Inventory::has_slots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Inventory::set_has_slots() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Inventory::clear_has_slots() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Inventory::clear_slots() {
  slots_ = 20;
  clear_has_slots();
}
 ::google::protobuf::int32 ActorData_Inventory::slots() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Inventory.slots)
  return slots_;
}
 void ActorData_Inventory::set_slots(::google::protobuf::int32 value) {
  set_has_slots();
  slots_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Inventory.slots)
}

// repeated .amarlon.proto.ActorData item = 2;
int ActorData_Inventory::item_size() const {
  return item_.size();
}
void ActorData_Inventory::clear_item() {
  item_.Clear();
}
const ::amarlon::proto::ActorData& ActorData_Inventory::item(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Inventory.item)
  return item_.Get(index);
}
::amarlon::proto::ActorData* ActorData_Inventory::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Inventory.item)
  return item_.Mutable(index);
}
::amarlon::proto::ActorData* ActorData_Inventory::add_item() {
  // @@protoc_insertion_point(field_add:amarlon.proto.ActorData.Inventory.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData >*
ActorData_Inventory::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.proto.ActorData.Inventory.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData >&
ActorData_Inventory::item() const {
  // @@protoc_insertion_point(field_list:amarlon.proto.ActorData.Inventory.item)
  return item_;
}

// -------------------------------------------------------------------

// ActorData_Character_AbilityScores

// required int32 STR = 1;
bool ActorData_Character_AbilityScores::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Character_AbilityScores::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Character_AbilityScores::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Character_AbilityScores::clear_str() {
  str_ = 0;
  clear_has_str();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::str() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.STR)
  return str_;
}
 void ActorData_Character_AbilityScores::set_str(::google::protobuf::int32 value) {
  set_has_str();
  str_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.STR)
}

// required int32 INT = 2;
bool ActorData_Character_AbilityScores::has_int_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData_Character_AbilityScores::set_has_int_() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData_Character_AbilityScores::clear_has_int_() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData_Character_AbilityScores::clear_int_() {
  int__ = 0;
  clear_has_int_();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::int_() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.INT)
  return int__;
}
 void ActorData_Character_AbilityScores::set_int_(::google::protobuf::int32 value) {
  set_has_int_();
  int__ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.INT)
}

// required int32 WIS = 3;
bool ActorData_Character_AbilityScores::has_wis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActorData_Character_AbilityScores::set_has_wis() {
  _has_bits_[0] |= 0x00000004u;
}
void ActorData_Character_AbilityScores::clear_has_wis() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActorData_Character_AbilityScores::clear_wis() {
  wis_ = 0;
  clear_has_wis();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::wis() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.WIS)
  return wis_;
}
 void ActorData_Character_AbilityScores::set_wis(::google::protobuf::int32 value) {
  set_has_wis();
  wis_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.WIS)
}

// required int32 DEX = 4;
bool ActorData_Character_AbilityScores::has_dex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActorData_Character_AbilityScores::set_has_dex() {
  _has_bits_[0] |= 0x00000008u;
}
void ActorData_Character_AbilityScores::clear_has_dex() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActorData_Character_AbilityScores::clear_dex() {
  dex_ = 0;
  clear_has_dex();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::dex() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.DEX)
  return dex_;
}
 void ActorData_Character_AbilityScores::set_dex(::google::protobuf::int32 value) {
  set_has_dex();
  dex_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.DEX)
}

// required int32 CON = 5;
bool ActorData_Character_AbilityScores::has_con() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActorData_Character_AbilityScores::set_has_con() {
  _has_bits_[0] |= 0x00000010u;
}
void ActorData_Character_AbilityScores::clear_has_con() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActorData_Character_AbilityScores::clear_con() {
  con_ = 0;
  clear_has_con();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::con() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.CON)
  return con_;
}
 void ActorData_Character_AbilityScores::set_con(::google::protobuf::int32 value) {
  set_has_con();
  con_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.CON)
}

// required int32 CHA = 6;
bool ActorData_Character_AbilityScores::has_cha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ActorData_Character_AbilityScores::set_has_cha() {
  _has_bits_[0] |= 0x00000020u;
}
void ActorData_Character_AbilityScores::clear_has_cha() {
  _has_bits_[0] &= ~0x00000020u;
}
void ActorData_Character_AbilityScores::clear_cha() {
  cha_ = 0;
  clear_has_cha();
}
 ::google::protobuf::int32 ActorData_Character_AbilityScores::cha() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.AbilityScores.CHA)
  return cha_;
}
 void ActorData_Character_AbilityScores::set_cha(::google::protobuf::int32 value) {
  set_has_cha();
  cha_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.AbilityScores.CHA)
}

// -------------------------------------------------------------------

// ActorData_Character_Spell

// required int32 id = 1;
bool ActorData_Character_Spell::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Character_Spell::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Character_Spell::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Character_Spell::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ActorData_Character_Spell::id() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.Spell.id)
  return id_;
}
 void ActorData_Character_Spell::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.Spell.id)
}

// -------------------------------------------------------------------

// ActorData_Character

// required int32 level = 1;
bool ActorData_Character::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Character::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Character::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Character::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 ActorData_Character::level() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.level)
  return level_;
}
 void ActorData_Character::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.level)
}

// required int32 class = 2;
bool ActorData_Character::has_class_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData_Character::set_has_class_() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData_Character::clear_has_class_() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData_Character::clear_class_() {
  class__ = 0;
  clear_has_class_();
}
 ::google::protobuf::int32 ActorData_Character::class_() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.class)
  return class__;
}
 void ActorData_Character::set_class_(::google::protobuf::int32 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.class)
}

// required int32 race = 3;
bool ActorData_Character::has_race() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActorData_Character::set_has_race() {
  _has_bits_[0] |= 0x00000004u;
}
void ActorData_Character::clear_has_race() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActorData_Character::clear_race() {
  race_ = 0;
  clear_has_race();
}
 ::google::protobuf::int32 ActorData_Character::race() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.race)
  return race_;
}
 void ActorData_Character::set_race(::google::protobuf::int32 value) {
  set_has_race();
  race_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.race)
}

// optional int32 experience = 4 [default = 0];
bool ActorData_Character::has_experience() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActorData_Character::set_has_experience() {
  _has_bits_[0] |= 0x00000008u;
}
void ActorData_Character::clear_has_experience() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActorData_Character::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
 ::google::protobuf::int32 ActorData_Character::experience() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.experience)
  return experience_;
}
 void ActorData_Character::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.experience)
}

// optional int32 armor = 5 [default = 0];
bool ActorData_Character::has_armor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActorData_Character::set_has_armor() {
  _has_bits_[0] |= 0x00000010u;
}
void ActorData_Character::clear_has_armor() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActorData_Character::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
 ::google::protobuf::int32 ActorData_Character::armor() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.armor)
  return armor_;
}
 void ActorData_Character::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.armor)
}

// optional int32 speed = 6 [default = 40];
bool ActorData_Character::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ActorData_Character::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void ActorData_Character::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void ActorData_Character::clear_speed() {
  speed_ = 40;
  clear_has_speed();
}
 ::google::protobuf::int32 ActorData_Character::speed() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.speed)
  return speed_;
}
 void ActorData_Character::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.speed)
}

// optional int32 hp = 7 [default = 0];
bool ActorData_Character::has_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ActorData_Character::set_has_hp() {
  _has_bits_[0] |= 0x00000040u;
}
void ActorData_Character::clear_has_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
void ActorData_Character::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
 ::google::protobuf::int32 ActorData_Character::hp() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.hp)
  return hp_;
}
 void ActorData_Character::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.hp)
}

// optional int32 maxHp = 8 [default = 0];
bool ActorData_Character::has_maxhp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ActorData_Character::set_has_maxhp() {
  _has_bits_[0] |= 0x00000080u;
}
void ActorData_Character::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000080u;
}
void ActorData_Character::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
 ::google::protobuf::int32 ActorData_Character::maxhp() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.maxHp)
  return maxhp_;
}
 void ActorData_Character::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.maxHp)
}

// optional int32 hpBonus = 9 [default = 0];
bool ActorData_Character::has_hpbonus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ActorData_Character::set_has_hpbonus() {
  _has_bits_[0] |= 0x00000100u;
}
void ActorData_Character::clear_has_hpbonus() {
  _has_bits_[0] &= ~0x00000100u;
}
void ActorData_Character::clear_hpbonus() {
  hpbonus_ = 0;
  clear_has_hpbonus();
}
 ::google::protobuf::int32 ActorData_Character::hpbonus() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.hpBonus)
  return hpbonus_;
}
 void ActorData_Character::set_hpbonus(::google::protobuf::int32 value) {
  set_has_hpbonus();
  hpbonus_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.hpBonus)
}

// optional string damage = 10 [default = "0d0+0#0"];
bool ActorData_Character::has_damage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ActorData_Character::set_has_damage() {
  _has_bits_[0] |= 0x00000200u;
}
void ActorData_Character::clear_has_damage() {
  _has_bits_[0] &= ~0x00000200u;
}
void ActorData_Character::clear_damage() {
  damage_.ClearToDefaultNoArena(_default_damage_);
  clear_has_damage();
}
 const ::std::string& ActorData_Character::damage() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.damage)
  return damage_.GetNoArena(_default_damage_);
}
 void ActorData_Character::set_damage(const ::std::string& value) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_, value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.damage)
}
 void ActorData_Character::set_damage(const char* value) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.Character.damage)
}
 void ActorData_Character::set_damage(const char* value, size_t size) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.Character.damage)
}
 ::std::string* ActorData_Character::mutable_damage() {
  set_has_damage();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Character.damage)
  return damage_.MutableNoArena(_default_damage_);
}
 ::std::string* ActorData_Character::release_damage() {
  clear_has_damage();
  return damage_.ReleaseNoArena(_default_damage_);
}
 void ActorData_Character::set_allocated_damage(::std::string* damage) {
  if (damage != NULL) {
    set_has_damage();
  } else {
    clear_has_damage();
  }
  damage_.SetAllocatedNoArena(_default_damage_, damage);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.Character.damage)
}

// optional int32 morale = 11 [default = 0];
bool ActorData_Character::has_morale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ActorData_Character::set_has_morale() {
  _has_bits_[0] |= 0x00000400u;
}
void ActorData_Character::clear_has_morale() {
  _has_bits_[0] &= ~0x00000400u;
}
void ActorData_Character::clear_morale() {
  morale_ = 0;
  clear_has_morale();
}
 ::google::protobuf::int32 ActorData_Character::morale() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.morale)
  return morale_;
}
 void ActorData_Character::set_morale(::google::protobuf::int32 value) {
  set_has_morale();
  morale_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Character.morale)
}

// optional .amarlon.proto.ActorData.Character.AbilityScores abilityScores = 12;
bool ActorData_Character::has_abilityscores() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ActorData_Character::set_has_abilityscores() {
  _has_bits_[0] |= 0x00000800u;
}
void ActorData_Character::clear_has_abilityscores() {
  _has_bits_[0] &= ~0x00000800u;
}
void ActorData_Character::clear_abilityscores() {
  if (abilityscores_ != NULL) abilityscores_->::amarlon::proto::ActorData_Character_AbilityScores::Clear();
  clear_has_abilityscores();
}
const ::amarlon::proto::ActorData_Character_AbilityScores& ActorData_Character::abilityscores() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.abilityScores)
  return abilityscores_ != NULL ? *abilityscores_ : *default_instance_->abilityscores_;
}
::amarlon::proto::ActorData_Character_AbilityScores* ActorData_Character::mutable_abilityscores() {
  set_has_abilityscores();
  if (abilityscores_ == NULL) {
    abilityscores_ = new ::amarlon::proto::ActorData_Character_AbilityScores;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Character.abilityScores)
  return abilityscores_;
}
::amarlon::proto::ActorData_Character_AbilityScores* ActorData_Character::release_abilityscores() {
  clear_has_abilityscores();
  ::amarlon::proto::ActorData_Character_AbilityScores* temp = abilityscores_;
  abilityscores_ = NULL;
  return temp;
}
void ActorData_Character::set_allocated_abilityscores(::amarlon::proto::ActorData_Character_AbilityScores* abilityscores) {
  delete abilityscores_;
  abilityscores_ = abilityscores;
  if (abilityscores) {
    set_has_abilityscores();
  } else {
    clear_has_abilityscores();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.Character.abilityScores)
}

// repeated .amarlon.proto.ActorData.Character.Spell spells = 13;
int ActorData_Character::spells_size() const {
  return spells_.size();
}
void ActorData_Character::clear_spells() {
  spells_.Clear();
}
const ::amarlon::proto::ActorData_Character_Spell& ActorData_Character::spells(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Character.spells)
  return spells_.Get(index);
}
::amarlon::proto::ActorData_Character_Spell* ActorData_Character::mutable_spells(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Character.spells)
  return spells_.Mutable(index);
}
::amarlon::proto::ActorData_Character_Spell* ActorData_Character::add_spells() {
  // @@protoc_insertion_point(field_add:amarlon.proto.ActorData.Character.spells)
  return spells_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData_Character_Spell >*
ActorData_Character::mutable_spells() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.proto.ActorData.Character.spells)
  return &spells_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData_Character_Spell >&
ActorData_Character::spells() const {
  // @@protoc_insertion_point(field_list:amarlon.proto.ActorData.Character.spells)
  return spells_;
}

// -------------------------------------------------------------------

// ActorData_Destroyable_DropRule

// required int32 itemId = 1;
bool ActorData_Destroyable_DropRule::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Destroyable_DropRule::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Destroyable_DropRule::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Destroyable_DropRule::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 ActorData_Destroyable_DropRule::itemid() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Destroyable.DropRule.itemId)
  return itemid_;
}
 void ActorData_Destroyable_DropRule::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Destroyable.DropRule.itemId)
}

// optional int32 min = 2 [default = 1];
bool ActorData_Destroyable_DropRule::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData_Destroyable_DropRule::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData_Destroyable_DropRule::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData_Destroyable_DropRule::clear_min() {
  min_ = 1;
  clear_has_min();
}
 ::google::protobuf::int32 ActorData_Destroyable_DropRule::min() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Destroyable.DropRule.min)
  return min_;
}
 void ActorData_Destroyable_DropRule::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Destroyable.DropRule.min)
}

// optional int32 max = 3 [default = 1];
bool ActorData_Destroyable_DropRule::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActorData_Destroyable_DropRule::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void ActorData_Destroyable_DropRule::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActorData_Destroyable_DropRule::clear_max() {
  max_ = 1;
  clear_has_max();
}
 ::google::protobuf::int32 ActorData_Destroyable_DropRule::max() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Destroyable.DropRule.max)
  return max_;
}
 void ActorData_Destroyable_DropRule::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Destroyable.DropRule.max)
}

// optional float chance = 4 [default = 1];
bool ActorData_Destroyable_DropRule::has_chance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActorData_Destroyable_DropRule::set_has_chance() {
  _has_bits_[0] |= 0x00000008u;
}
void ActorData_Destroyable_DropRule::clear_has_chance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActorData_Destroyable_DropRule::clear_chance() {
  chance_ = 1;
  clear_has_chance();
}
 float ActorData_Destroyable_DropRule::chance() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Destroyable.DropRule.chance)
  return chance_;
}
 void ActorData_Destroyable_DropRule::set_chance(float value) {
  set_has_chance();
  chance_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Destroyable.DropRule.chance)
}

// -------------------------------------------------------------------

// ActorData_Destroyable

// -------------------------------------------------------------------

// ActorData_Wearer_ItemSlot

// required int32 id = 1;
bool ActorData_Wearer_ItemSlot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Wearer_ItemSlot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Wearer_ItemSlot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Wearer_ItemSlot::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ActorData_Wearer_ItemSlot::id() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Wearer.ItemSlot.id)
  return id_;
}
 void ActorData_Wearer_ItemSlot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Wearer.ItemSlot.id)
}

// optional .amarlon.proto.ActorData item = 2;
bool ActorData_Wearer_ItemSlot::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData_Wearer_ItemSlot::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData_Wearer_ItemSlot::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData_Wearer_ItemSlot::clear_item() {
  if (item_ != NULL) item_->::amarlon::proto::ActorData::Clear();
  clear_has_item();
}
const ::amarlon::proto::ActorData& ActorData_Wearer_ItemSlot::item() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Wearer.ItemSlot.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
::amarlon::proto::ActorData* ActorData_Wearer_ItemSlot::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::amarlon::proto::ActorData;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Wearer.ItemSlot.item)
  return item_;
}
::amarlon::proto::ActorData* ActorData_Wearer_ItemSlot::release_item() {
  clear_has_item();
  ::amarlon::proto::ActorData* temp = item_;
  item_ = NULL;
  return temp;
}
void ActorData_Wearer_ItemSlot::set_allocated_item(::amarlon::proto::ActorData* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.Wearer.ItemSlot.item)
}

// -------------------------------------------------------------------

// ActorData_Wearer

// repeated .amarlon.proto.ActorData.Wearer.ItemSlot itemSlots = 1;
int ActorData_Wearer::itemslots_size() const {
  return itemslots_.size();
}
void ActorData_Wearer::clear_itemslots() {
  itemslots_.Clear();
}
const ::amarlon::proto::ActorData_Wearer_ItemSlot& ActorData_Wearer::itemslots(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Wearer.itemSlots)
  return itemslots_.Get(index);
}
::amarlon::proto::ActorData_Wearer_ItemSlot* ActorData_Wearer::mutable_itemslots(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Wearer.itemSlots)
  return itemslots_.Mutable(index);
}
::amarlon::proto::ActorData_Wearer_ItemSlot* ActorData_Wearer::add_itemslots() {
  // @@protoc_insertion_point(field_add:amarlon.proto.ActorData.Wearer.itemSlots)
  return itemslots_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData_Wearer_ItemSlot >*
ActorData_Wearer::mutable_itemslots() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.proto.ActorData.Wearer.itemSlots)
  return &itemslots_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData_Wearer_ItemSlot >&
ActorData_Wearer::itemslots() const {
  // @@protoc_insertion_point(field_list:amarlon.proto.ActorData.Wearer.itemSlots)
  return itemslots_;
}

// -------------------------------------------------------------------

// ActorData_Ai

// required int32 type = 1;
bool ActorData_Ai::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Ai::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Ai::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Ai::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 ActorData_Ai::type() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Ai.type)
  return type_;
}
 void ActorData_Ai::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Ai.type)
}

// -------------------------------------------------------------------

// ActorData_Openable

// required int32 scriptId = 1;
bool ActorData_Openable::has_scriptid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Openable::set_has_scriptid() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Openable::clear_has_scriptid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Openable::clear_scriptid() {
  scriptid_ = 0;
  clear_has_scriptid();
}
 ::google::protobuf::int32 ActorData_Openable::scriptid() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Openable.scriptId)
  return scriptid_;
}
 void ActorData_Openable::set_scriptid(::google::protobuf::int32 value) {
  set_has_scriptid();
  scriptid_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Openable.scriptId)
}

// -------------------------------------------------------------------

// ActorData_Pickable

// optional bool stackable = 1 [default = false];
bool ActorData_Pickable::has_stackable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData_Pickable::set_has_stackable() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData_Pickable::clear_has_stackable() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData_Pickable::clear_stackable() {
  stackable_ = false;
  clear_has_stackable();
}
 bool ActorData_Pickable::stackable() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.stackable)
  return stackable_;
}
 void ActorData_Pickable::set_stackable(bool value) {
  set_has_stackable();
  stackable_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.stackable)
}

// optional int32 amount = 2 [default = 1];
bool ActorData_Pickable::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData_Pickable::set_has_amount() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData_Pickable::clear_has_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData_Pickable::clear_amount() {
  amount_ = 1;
  clear_has_amount();
}
 ::google::protobuf::int32 ActorData_Pickable::amount() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.amount)
  return amount_;
}
 void ActorData_Pickable::set_amount(::google::protobuf::int32 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.amount)
}

// optional int32 uses = 3 [default = 0];
bool ActorData_Pickable::has_uses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActorData_Pickable::set_has_uses() {
  _has_bits_[0] |= 0x00000004u;
}
void ActorData_Pickable::clear_has_uses() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActorData_Pickable::clear_uses() {
  uses_ = 0;
  clear_has_uses();
}
 ::google::protobuf::int32 ActorData_Pickable::uses() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.uses)
  return uses_;
}
 void ActorData_Pickable::set_uses(::google::protobuf::int32 value) {
  set_has_uses();
  uses_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.uses)
}

// optional int32 itemSlot = 4 [default = 0];
bool ActorData_Pickable::has_itemslot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActorData_Pickable::set_has_itemslot() {
  _has_bits_[0] |= 0x00000008u;
}
void ActorData_Pickable::clear_has_itemslot() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActorData_Pickable::clear_itemslot() {
  itemslot_ = 0;
  clear_has_itemslot();
}
 ::google::protobuf::int32 ActorData_Pickable::itemslot() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.itemSlot)
  return itemslot_;
}
 void ActorData_Pickable::set_itemslot(::google::protobuf::int32 value) {
  set_has_itemslot();
  itemslot_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.itemSlot)
}

// optional int32 category = 5 [default = 0];
bool ActorData_Pickable::has_category() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActorData_Pickable::set_has_category() {
  _has_bits_[0] |= 0x00000010u;
}
void ActorData_Pickable::clear_has_category() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActorData_Pickable::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::google::protobuf::int32 ActorData_Pickable::category() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.category)
  return category_;
}
 void ActorData_Pickable::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.category)
}

// optional int32 armor = 6 [default = 0];
bool ActorData_Pickable::has_armor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ActorData_Pickable::set_has_armor() {
  _has_bits_[0] |= 0x00000020u;
}
void ActorData_Pickable::clear_has_armor() {
  _has_bits_[0] &= ~0x00000020u;
}
void ActorData_Pickable::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
 ::google::protobuf::int32 ActorData_Pickable::armor() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.armor)
  return armor_;
}
 void ActorData_Pickable::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.armor)
}

// optional int32 weight = 7 [default = 0];
bool ActorData_Pickable::has_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ActorData_Pickable::set_has_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void ActorData_Pickable::clear_has_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void ActorData_Pickable::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 ::google::protobuf::int32 ActorData_Pickable::weight() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.weight)
  return weight_;
}
 void ActorData_Pickable::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.weight)
}

// optional int32 price = 8 [default = 0];
bool ActorData_Pickable::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ActorData_Pickable::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
void ActorData_Pickable::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
void ActorData_Pickable::clear_price() {
  price_ = 0;
  clear_has_price();
}
 ::google::protobuf::int32 ActorData_Pickable::price() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.price)
  return price_;
}
 void ActorData_Pickable::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.price)
}

// optional int32 target = 9 [default = 0];
bool ActorData_Pickable::has_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ActorData_Pickable::set_has_target() {
  _has_bits_[0] |= 0x00000100u;
}
void ActorData_Pickable::clear_has_target() {
  _has_bits_[0] &= ~0x00000100u;
}
void ActorData_Pickable::clear_target() {
  target_ = 0;
  clear_has_target();
}
 ::google::protobuf::int32 ActorData_Pickable::target() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.target)
  return target_;
}
 void ActorData_Pickable::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.target)
}

// optional string damage = 10 [default = "0d0+0#0"];
bool ActorData_Pickable::has_damage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ActorData_Pickable::set_has_damage() {
  _has_bits_[0] |= 0x00000200u;
}
void ActorData_Pickable::clear_has_damage() {
  _has_bits_[0] &= ~0x00000200u;
}
void ActorData_Pickable::clear_damage() {
  damage_.ClearToDefaultNoArena(_default_damage_);
  clear_has_damage();
}
 const ::std::string& ActorData_Pickable::damage() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.damage)
  return damage_.GetNoArena(_default_damage_);
}
 void ActorData_Pickable::set_damage(const ::std::string& value) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_, value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.damage)
}
 void ActorData_Pickable::set_damage(const char* value) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.Pickable.damage)
}
 void ActorData_Pickable::set_damage(const char* value, size_t size) {
  set_has_damage();
  damage_.SetNoArena(_default_damage_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.Pickable.damage)
}
 ::std::string* ActorData_Pickable::mutable_damage() {
  set_has_damage();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.Pickable.damage)
  return damage_.MutableNoArena(_default_damage_);
}
 ::std::string* ActorData_Pickable::release_damage() {
  clear_has_damage();
  return damage_.ReleaseNoArena(_default_damage_);
}
 void ActorData_Pickable::set_allocated_damage(::std::string* damage) {
  if (damage != NULL) {
    set_has_damage();
  } else {
    clear_has_damage();
  }
  damage_.SetAllocatedNoArena(_default_damage_, damage);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.Pickable.damage)
}

// optional int32 scriptId = 11 [default = 0];
bool ActorData_Pickable::has_scriptid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ActorData_Pickable::set_has_scriptid() {
  _has_bits_[0] |= 0x00000400u;
}
void ActorData_Pickable::clear_has_scriptid() {
  _has_bits_[0] &= ~0x00000400u;
}
void ActorData_Pickable::clear_scriptid() {
  scriptid_ = 0;
  clear_has_scriptid();
}
 ::google::protobuf::int32 ActorData_Pickable::scriptid() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.Pickable.scriptId)
  return scriptid_;
}
 void ActorData_Pickable::set_scriptid(::google::protobuf::int32 value) {
  set_has_scriptid();
  scriptid_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.Pickable.scriptId)
}

// -------------------------------------------------------------------

// ActorData

// required int32 id = 1;
bool ActorData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ActorData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.id)
  return id_;
}
 void ActorData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.id)
}

// required string name = 2;
bool ActorData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ActorData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActorData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.name)
}
 void ActorData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.name)
}
 void ActorData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.name)
}
 ::std::string* ActorData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ActorData::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActorData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.name)
}

// optional string symbol = 3 [default = "@"];
bool ActorData::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActorData::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
void ActorData::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActorData::clear_symbol() {
  symbol_.ClearToDefaultNoArena(_default_symbol_);
  clear_has_symbol();
}
 const ::std::string& ActorData::symbol() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.symbol)
  return symbol_.GetNoArena(_default_symbol_);
}
 void ActorData::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(_default_symbol_, value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.symbol)
}
 void ActorData::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(_default_symbol_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.symbol)
}
 void ActorData::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(_default_symbol_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.symbol)
}
 ::std::string* ActorData::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.symbol)
  return symbol_.MutableNoArena(_default_symbol_);
}
 ::std::string* ActorData::release_symbol() {
  clear_has_symbol();
  return symbol_.ReleaseNoArena(_default_symbol_);
}
 void ActorData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(_default_symbol_, symbol);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.symbol)
}

// optional string color = 4 [default = "ffffff"];
bool ActorData::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActorData::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void ActorData::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActorData::clear_color() {
  color_.ClearToDefaultNoArena(_default_color_);
  clear_has_color();
}
 const ::std::string& ActorData::color() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.color)
  return color_.GetNoArena(_default_color_);
}
 void ActorData::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(_default_color_, value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.color)
}
 void ActorData::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(_default_color_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.color)
}
 void ActorData::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(_default_color_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.color)
}
 ::std::string* ActorData::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.color)
  return color_.MutableNoArena(_default_color_);
}
 ::std::string* ActorData::release_color() {
  clear_has_color();
  return color_.ReleaseNoArena(_default_color_);
}
 void ActorData::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(_default_color_, color);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.color)
}

// optional bool blocks = 5 [default = true];
bool ActorData::has_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActorData::set_has_blocks() {
  _has_bits_[0] |= 0x00000010u;
}
void ActorData::clear_has_blocks() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActorData::clear_blocks() {
  blocks_ = true;
  clear_has_blocks();
}
 bool ActorData::blocks() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.blocks)
  return blocks_;
}
 void ActorData::set_blocks(bool value) {
  set_has_blocks();
  blocks_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.blocks)
}

// optional bool fovOnly = 6 [default = true];
bool ActorData::has_fovonly() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ActorData::set_has_fovonly() {
  _has_bits_[0] |= 0x00000020u;
}
void ActorData::clear_has_fovonly() {
  _has_bits_[0] &= ~0x00000020u;
}
void ActorData::clear_fovonly() {
  fovonly_ = true;
  clear_has_fovonly();
}
 bool ActorData::fovonly() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.fovOnly)
  return fovonly_;
}
 void ActorData::set_fovonly(bool value) {
  set_has_fovonly();
  fovonly_ = value;
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.fovOnly)
}

// optional string description = 7 [default = ""];
bool ActorData::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ActorData::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void ActorData::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void ActorData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& ActorData::description() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActorData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.proto.ActorData.description)
}
 void ActorData::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.proto.ActorData.description)
}
 void ActorData::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.proto.ActorData.description)
}
 ::std::string* ActorData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ActorData::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActorData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.description)
}

// optional .amarlon.proto.ActorData.Inventory inventory = 8;
bool ActorData::has_inventory() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ActorData::set_has_inventory() {
  _has_bits_[0] |= 0x00000080u;
}
void ActorData::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000080u;
}
void ActorData::clear_inventory() {
  if (inventory_ != NULL) inventory_->::amarlon::proto::ActorData_Inventory::Clear();
  clear_has_inventory();
}
const ::amarlon::proto::ActorData_Inventory& ActorData::inventory() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.inventory)
  return inventory_ != NULL ? *inventory_ : *default_instance_->inventory_;
}
::amarlon::proto::ActorData_Inventory* ActorData::mutable_inventory() {
  set_has_inventory();
  if (inventory_ == NULL) {
    inventory_ = new ::amarlon::proto::ActorData_Inventory;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.inventory)
  return inventory_;
}
::amarlon::proto::ActorData_Inventory* ActorData::release_inventory() {
  clear_has_inventory();
  ::amarlon::proto::ActorData_Inventory* temp = inventory_;
  inventory_ = NULL;
  return temp;
}
void ActorData::set_allocated_inventory(::amarlon::proto::ActorData_Inventory* inventory) {
  delete inventory_;
  inventory_ = inventory;
  if (inventory) {
    set_has_inventory();
  } else {
    clear_has_inventory();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.inventory)
}

// optional .amarlon.proto.ActorData.Character character = 9;
bool ActorData::has_character() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ActorData::set_has_character() {
  _has_bits_[0] |= 0x00000100u;
}
void ActorData::clear_has_character() {
  _has_bits_[0] &= ~0x00000100u;
}
void ActorData::clear_character() {
  if (character_ != NULL) character_->::amarlon::proto::ActorData_Character::Clear();
  clear_has_character();
}
const ::amarlon::proto::ActorData_Character& ActorData::character() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.character)
  return character_ != NULL ? *character_ : *default_instance_->character_;
}
::amarlon::proto::ActorData_Character* ActorData::mutable_character() {
  set_has_character();
  if (character_ == NULL) {
    character_ = new ::amarlon::proto::ActorData_Character;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.character)
  return character_;
}
::amarlon::proto::ActorData_Character* ActorData::release_character() {
  clear_has_character();
  ::amarlon::proto::ActorData_Character* temp = character_;
  character_ = NULL;
  return temp;
}
void ActorData::set_allocated_character(::amarlon::proto::ActorData_Character* character) {
  delete character_;
  character_ = character;
  if (character) {
    set_has_character();
  } else {
    clear_has_character();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.character)
}

// optional .amarlon.proto.ActorData.Destroyable destroyable = 10;
bool ActorData::has_destroyable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ActorData::set_has_destroyable() {
  _has_bits_[0] |= 0x00000200u;
}
void ActorData::clear_has_destroyable() {
  _has_bits_[0] &= ~0x00000200u;
}
void ActorData::clear_destroyable() {
  if (destroyable_ != NULL) destroyable_->::amarlon::proto::ActorData_Destroyable::Clear();
  clear_has_destroyable();
}
const ::amarlon::proto::ActorData_Destroyable& ActorData::destroyable() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.destroyable)
  return destroyable_ != NULL ? *destroyable_ : *default_instance_->destroyable_;
}
::amarlon::proto::ActorData_Destroyable* ActorData::mutable_destroyable() {
  set_has_destroyable();
  if (destroyable_ == NULL) {
    destroyable_ = new ::amarlon::proto::ActorData_Destroyable;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.destroyable)
  return destroyable_;
}
::amarlon::proto::ActorData_Destroyable* ActorData::release_destroyable() {
  clear_has_destroyable();
  ::amarlon::proto::ActorData_Destroyable* temp = destroyable_;
  destroyable_ = NULL;
  return temp;
}
void ActorData::set_allocated_destroyable(::amarlon::proto::ActorData_Destroyable* destroyable) {
  delete destroyable_;
  destroyable_ = destroyable;
  if (destroyable) {
    set_has_destroyable();
  } else {
    clear_has_destroyable();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.destroyable)
}

// optional .amarlon.proto.ActorData.Wearer wearer = 11;
bool ActorData::has_wearer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ActorData::set_has_wearer() {
  _has_bits_[0] |= 0x00000400u;
}
void ActorData::clear_has_wearer() {
  _has_bits_[0] &= ~0x00000400u;
}
void ActorData::clear_wearer() {
  if (wearer_ != NULL) wearer_->::amarlon::proto::ActorData_Wearer::Clear();
  clear_has_wearer();
}
const ::amarlon::proto::ActorData_Wearer& ActorData::wearer() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.wearer)
  return wearer_ != NULL ? *wearer_ : *default_instance_->wearer_;
}
::amarlon::proto::ActorData_Wearer* ActorData::mutable_wearer() {
  set_has_wearer();
  if (wearer_ == NULL) {
    wearer_ = new ::amarlon::proto::ActorData_Wearer;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.wearer)
  return wearer_;
}
::amarlon::proto::ActorData_Wearer* ActorData::release_wearer() {
  clear_has_wearer();
  ::amarlon::proto::ActorData_Wearer* temp = wearer_;
  wearer_ = NULL;
  return temp;
}
void ActorData::set_allocated_wearer(::amarlon::proto::ActorData_Wearer* wearer) {
  delete wearer_;
  wearer_ = wearer;
  if (wearer) {
    set_has_wearer();
  } else {
    clear_has_wearer();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.wearer)
}

// optional .amarlon.proto.ActorData.Ai ai = 12;
bool ActorData::has_ai() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ActorData::set_has_ai() {
  _has_bits_[0] |= 0x00000800u;
}
void ActorData::clear_has_ai() {
  _has_bits_[0] &= ~0x00000800u;
}
void ActorData::clear_ai() {
  if (ai_ != NULL) ai_->::amarlon::proto::ActorData_Ai::Clear();
  clear_has_ai();
}
const ::amarlon::proto::ActorData_Ai& ActorData::ai() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.ai)
  return ai_ != NULL ? *ai_ : *default_instance_->ai_;
}
::amarlon::proto::ActorData_Ai* ActorData::mutable_ai() {
  set_has_ai();
  if (ai_ == NULL) {
    ai_ = new ::amarlon::proto::ActorData_Ai;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.ai)
  return ai_;
}
::amarlon::proto::ActorData_Ai* ActorData::release_ai() {
  clear_has_ai();
  ::amarlon::proto::ActorData_Ai* temp = ai_;
  ai_ = NULL;
  return temp;
}
void ActorData::set_allocated_ai(::amarlon::proto::ActorData_Ai* ai) {
  delete ai_;
  ai_ = ai;
  if (ai) {
    set_has_ai();
  } else {
    clear_has_ai();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.ai)
}

// optional .amarlon.proto.ActorData.Openable openable = 13;
bool ActorData::has_openable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ActorData::set_has_openable() {
  _has_bits_[0] |= 0x00001000u;
}
void ActorData::clear_has_openable() {
  _has_bits_[0] &= ~0x00001000u;
}
void ActorData::clear_openable() {
  if (openable_ != NULL) openable_->::amarlon::proto::ActorData_Openable::Clear();
  clear_has_openable();
}
const ::amarlon::proto::ActorData_Openable& ActorData::openable() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.openable)
  return openable_ != NULL ? *openable_ : *default_instance_->openable_;
}
::amarlon::proto::ActorData_Openable* ActorData::mutable_openable() {
  set_has_openable();
  if (openable_ == NULL) {
    openable_ = new ::amarlon::proto::ActorData_Openable;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.openable)
  return openable_;
}
::amarlon::proto::ActorData_Openable* ActorData::release_openable() {
  clear_has_openable();
  ::amarlon::proto::ActorData_Openable* temp = openable_;
  openable_ = NULL;
  return temp;
}
void ActorData::set_allocated_openable(::amarlon::proto::ActorData_Openable* openable) {
  delete openable_;
  openable_ = openable;
  if (openable) {
    set_has_openable();
  } else {
    clear_has_openable();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.openable)
}

// optional .amarlon.proto.ActorData.Pickable pickable = 14;
bool ActorData::has_pickable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ActorData::set_has_pickable() {
  _has_bits_[0] |= 0x00002000u;
}
void ActorData::clear_has_pickable() {
  _has_bits_[0] &= ~0x00002000u;
}
void ActorData::clear_pickable() {
  if (pickable_ != NULL) pickable_->::amarlon::proto::ActorData_Pickable::Clear();
  clear_has_pickable();
}
const ::amarlon::proto::ActorData_Pickable& ActorData::pickable() const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorData.pickable)
  return pickable_ != NULL ? *pickable_ : *default_instance_->pickable_;
}
::amarlon::proto::ActorData_Pickable* ActorData::mutable_pickable() {
  set_has_pickable();
  if (pickable_ == NULL) {
    pickable_ = new ::amarlon::proto::ActorData_Pickable;
  }
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorData.pickable)
  return pickable_;
}
::amarlon::proto::ActorData_Pickable* ActorData::release_pickable() {
  clear_has_pickable();
  ::amarlon::proto::ActorData_Pickable* temp = pickable_;
  pickable_ = NULL;
  return temp;
}
void ActorData::set_allocated_pickable(::amarlon::proto::ActorData_Pickable* pickable) {
  delete pickable_;
  pickable_ = pickable;
  if (pickable) {
    set_has_pickable();
  } else {
    clear_has_pickable();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.proto.ActorData.pickable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ActorsData::kActorFieldNumber;
#endif  // !_MSC_VER

ActorsData::ActorsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.proto.ActorsData)
}

void ActorsData::InitAsDefaultInstance() {
}

ActorsData::ActorsData(const ActorsData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.proto.ActorsData)
}

void ActorsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorsData::~ActorsData() {
  // @@protoc_insertion_point(destructor:amarlon.proto.ActorsData)
  SharedDtor();
}

void ActorsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorsData_descriptor_;
}

const ActorsData& ActorsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actors_2eproto();
  return *default_instance_;
}

ActorsData* ActorsData::default_instance_ = NULL;

ActorsData* ActorsData::New(::google::protobuf::Arena* arena) const {
  ActorsData* n = new ActorsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorsData::Clear() {
  actor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActorsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.proto.ActorsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.proto.ActorData actor = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.proto.ActorsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.proto.ActorsData)
  return false;
#undef DO_
}

void ActorsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.proto.ActorsData)
  // repeated .amarlon.proto.ActorData actor = 1;
  for (unsigned int i = 0, n = this->actor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actor(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.proto.ActorsData)
}

::google::protobuf::uint8* ActorsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.proto.ActorsData)
  // repeated .amarlon.proto.ActorData actor = 1;
  for (unsigned int i = 0, n = this->actor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actor(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.proto.ActorsData)
  return target;
}

int ActorsData::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.proto.ActorData actor = 1;
  total_size += 1 * this->actor_size();
  for (int i = 0; i < this->actor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorsData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ActorsData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorsData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorsData::MergeFrom(const ActorsData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  actor_.MergeFrom(from.actor_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActorsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorsData::CopyFrom(const ActorsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorsData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->actor())) return false;
  return true;
}

void ActorsData::Swap(ActorsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorsData::InternalSwap(ActorsData* other) {
  actor_.UnsafeArenaSwap(&other->actor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorsData_descriptor_;
  metadata.reflection = ActorsData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActorsData

// repeated .amarlon.proto.ActorData actor = 1;
int ActorsData::actor_size() const {
  return actor_.size();
}
void ActorsData::clear_actor() {
  actor_.Clear();
}
const ::amarlon::proto::ActorData& ActorsData::actor(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.proto.ActorsData.actor)
  return actor_.Get(index);
}
::amarlon::proto::ActorData* ActorsData::mutable_actor(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.proto.ActorsData.actor)
  return actor_.Mutable(index);
}
::amarlon::proto::ActorData* ActorsData::add_actor() {
  // @@protoc_insertion_point(field_add:amarlon.proto.ActorsData.actor)
  return actor_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData >*
ActorsData::mutable_actor() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.proto.ActorsData.actor)
  return &actor_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::proto::ActorData >&
ActorsData::actor() const {
  // @@protoc_insertion_point(field_list:amarlon.proto.ActorsData.actor)
  return actor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
