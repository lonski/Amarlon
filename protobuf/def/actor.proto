syntax = "proto2";

package amarlon;
import "spell.proto";
import "item_type.proto";
import "drop_rule.proto";
import "utils.proto";

message AiData {
  optional fixed32 flags  = 1;
  optional int32   script = 2;
  optional int32   type   = 3;
}

message CharacterData {
  optional int32 level              = 1;
  optional int32 hp                 = 2;
  optional int32 maxHP              = 3;
  optional int32 baseAC             = 4;
  optional int32 experience         = 5;
  optional int32 classType          = 6;
  optional int32 raceType           = 7;
  optional int32 speed              = 8;
  optional int32 movePoints         = 9;
  optional int32 team               = 10;
  optional int32 morale             = 11;
  optional string damage            = 12;
  optional SpellBookData spellbook  = 13;
  optional int32 characterType      = 14;
  optional int32 uses_count         = 15;

  repeated IntIntPair skills        = 16;
  repeated IntIntPair abilityScores = 17;

  repeated string modifiers         = 18;
}

message DestroyableData {
  repeated DropRule dropRules = 1;
}

message InventoryData {
  optional int32 slotCount = 1;
  repeated ActorData items = 2;
}

message OpenableData {
  optional bool locked      = 1;
  optional bool closed      = 2;
  optional int32 lock_id    = 3;
  optional int32 lock_level = 4;
  optional int32 script_id  = 5;
}

message PickableData {
  optional bool stackable         = 1;
  optional int32 amount           = 2;
  optional int32 item_slot        = 3;
  optional int32 armor_class      = 4;
  optional int32 weight           = 5;
  optional int32 price            = 6;
  optional int32 target_type      = 7;
  optional string damage          = 8;
  optional int32 script_id        = 9;
  optional int32 range            = 10;
  optional int32 radius           = 11;
  optional ItemTypeData item_type = 12;
  optional int32 uses_count       = 13;
  optional int32 spell_id         = 14;
}

message TalkerData {
  optional int32 id = 1;
}

message TrapData {
  optional int32 id         = 1;
  optional int32 difficulty = 2;
  optional bool is_armed    = 3;
  optional bool is_detected = 4;
}

message WearerData {
  repeated int32 item_slots         = 1;
  repeated ActorData equipped_items = 2;
}

message StatusEffectData {
  optional string name    = 1;
  optional int32 duration = 2;
  optional string script  = 3;
}

message ActorData{
  optional int32 actor_type                  = 1;
  optional string name                       = 2;
  optional int32 x                           = 3;
  optional string description                = 4;
  optional int32 y                           = 5;
  optional int32 flags                       = 6;
  optional bool is_fov_only                  = 7;
  optional bool is_transparent               = 8;
  optional bool is_blocking                  = 9;
  optional string symbol                     = 100;
  optional int32 render_priority             = 11;
  optional string color                      = 12;

  repeated StatusEffectData effects          = 13;

  optional AiData ai                         = 14;
  optional CharacterData character           = 15;
  optional DestroyableData destroyable       = 16;
  optional InventoryData inventory           = 17;
  optional OpenableData openable             = 18;
  optional PickableData pickable             = 19;
  optional TrapData trap                     = 20;
  optional WearerData wearer                 = 21;
  optional TalkerData talker                 = 22;
}

message ActorsData {
  repeated ActorData actor = 1;
}