// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

namespace {

const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillsData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_skill_2eproto() {
  protobuf_AddDesc_skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "skill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillData_descriptor_ = file->message_type(0);
  static const int SkillData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, passive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, target_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, description_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  SkillsData_descriptor_ = file->message_type(1);
  static const int SkillsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsData, skill_),
  };
  SkillsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillsData_descriptor_,
      SkillsData::default_instance_,
      SkillsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillsData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillsData_descriptor_, &SkillsData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_skill_2eproto() {
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete SkillsData::default_instance_;
  delete SkillsData_reflection_;
}

void protobuf_AddDesc_skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013skill.proto\022\007amarlon\"\243\001\n\tSkillData\022\n\n\002"
    "id\030\001 \001(\005\022\020\n\005level\030\002 \001(\005:\0010\022\026\n\007passive\030\003 "
    "\001(\010:\005false\022\020\n\005range\030\004 \001(\005:\0010\022\021\n\006radius\030\005"
    " \001(\005:\0010\022\026\n\013target_type\030\006 \001(\005:\0010\022\014\n\004name\030"
    "\007 \001(\t\022\025\n\013description\030\010 \001(\t:\000\"/\n\nSkillsDa"
    "ta\022!\n\005skill\030\001 \003(\0132\022.amarlon.SkillData", 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "skill.proto", &protobuf_RegisterTypes);
  SkillData::default_instance_ = new SkillData();
  SkillsData::default_instance_ = new SkillsData();
  SkillData::default_instance_->InitAsDefaultInstance();
  SkillsData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skill_2eproto {
  StaticDescriptorInitializer_skill_2eproto() {
    protobuf_AddDesc_skill_2eproto();
  }
} static_descriptor_initializer_skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillData::kIdFieldNumber;
const int SkillData::kLevelFieldNumber;
const int SkillData::kPassiveFieldNumber;
const int SkillData::kRangeFieldNumber;
const int SkillData::kRadiusFieldNumber;
const int SkillData::kTargetTypeFieldNumber;
const int SkillData::kNameFieldNumber;
const int SkillData::kDescriptionFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.SkillData)
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.SkillData)
}

void SkillData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  passive_ = false;
  range_ = 0;
  radius_ = 0;
  target_type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  // @@protoc_insertion_point(destructor:amarlon.SkillData)
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, target_type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.SkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_passive;
        break;
      }

      // optional bool passive = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_passive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_)));
          set_has_passive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional int32 range = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_radius;
        break;
      }

      // optional int32 radius = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_target_type;
        break;
      }

      // optional int32 target_type = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_target_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_type_)));
          set_has_target_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_description;
        break;
      }

      // optional string description = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.SkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.SkillData)
  return false;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.SkillData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional bool passive = 3 [default = false];
  if (has_passive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passive(), output);
  }

  // optional int32 range = 4 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  // optional int32 radius = 5 [default = 0];
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->radius(), output);
  }

  // optional int32 target_type = 6 [default = 0];
  if (has_target_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->target_type(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // optional string description = 8 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.SkillData)
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.SkillData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional bool passive = 3 [default = false];
  if (has_passive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passive(), target);
  }

  // optional int32 range = 4 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  // optional int32 radius = 5 [default = 0];
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->radius(), target);
  }

  // optional int32 target_type = 6 [default = 0];
  if (has_target_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->target_type(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string description = 8 [default = ""];
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.SkillData)
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool passive = 3 [default = false];
    if (has_passive()) {
      total_size += 1 + 1;
    }

    // optional int32 range = 4 [default = 0];
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // optional int32 radius = 5 [default = 0];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional int32 target_type = 6 [default = 0];
    if (has_target_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_type());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 8 [default = ""];
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_passive()) {
      set_passive(from.passive());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_target_type()) {
      set_target_type(from.target_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(passive_, other->passive_);
    std::swap(range_, other->range_);
    std::swap(radius_, other->radius_);
    std::swap(target_type_, other->target_type_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillsData::kSkillFieldNumber;
#endif  // !_MSC_VER

SkillsData::SkillsData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.SkillsData)
}

void SkillsData::InitAsDefaultInstance() {
}

SkillsData::SkillsData(const SkillsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.SkillsData)
}

void SkillsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillsData::~SkillsData() {
  // @@protoc_insertion_point(destructor:amarlon.SkillsData)
  SharedDtor();
}

void SkillsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillsData_descriptor_;
}

const SkillsData& SkillsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_skill_2eproto();
  return *default_instance_;
}

SkillsData* SkillsData::default_instance_ = NULL;

SkillsData* SkillsData::New() const {
  return new SkillsData;
}

void SkillsData::Clear() {
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.SkillsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.SkillData skill = 1;
      case 1: {
        if (tag == 10) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.SkillsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.SkillsData)
  return false;
#undef DO_
}

void SkillsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.SkillsData)
  // repeated .amarlon.SkillData skill = 1;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.SkillsData)
}

::google::protobuf::uint8* SkillsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.SkillsData)
  // repeated .amarlon.SkillData skill = 1;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.SkillsData)
  return target;
}

int SkillsData::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.SkillData skill = 1;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillsData::MergeFrom(const SkillsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillsData::CopyFrom(const SkillsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillsData::IsInitialized() const {

  return true;
}

void SkillsData::Swap(SkillsData* other) {
  if (other != this) {
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillsData_descriptor_;
  metadata.reflection = SkillsData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
