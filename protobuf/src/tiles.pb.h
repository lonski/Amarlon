// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiles.proto

#ifndef PROTOBUF_tiles_2eproto__INCLUDED
#define PROTOBUF_tiles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tiles_2eproto();
void protobuf_AssignDesc_tiles_2eproto();
void protobuf_ShutdownFile_tiles_2eproto();

class TileData;
class TilesData;

// ===================================================================

class TileData : public ::google::protobuf::Message {
 public:
  TileData();
  virtual ~TileData();

  TileData(const TileData& from);

  inline TileData& operator=(const TileData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileData& default_instance();

  void Swap(TileData* other);

  // implements Message ----------------------------------------------

  inline TileData* New() const { return New(NULL); }

  TileData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileData& from);
  void MergeFrom(const TileData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string character = 3;
  bool has_character() const;
  void clear_character();
  static const int kCharacterFieldNumber = 3;
  const ::std::string& character() const;
  void set_character(const ::std::string& value);
  void set_character(const char* value);
  void set_character(const char* value, size_t size);
  ::std::string* mutable_character();
  ::std::string* release_character();
  void set_allocated_character(::std::string* character);

  // required string color = 4;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // required bool transparent = 5;
  bool has_transparent() const;
  void clear_transparent();
  static const int kTransparentFieldNumber = 5;
  bool transparent() const;
  void set_transparent(bool value);

  // required bool walkable = 6;
  bool has_walkable() const;
  void clear_walkable();
  static const int kWalkableFieldNumber = 6;
  bool walkable() const;
  void set_walkable(bool value);

  // @@protoc_insertion_point(class_scope:amarlon.TileData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_character();
  inline void clear_has_character();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_transparent();
  inline void clear_has_transparent();
  inline void set_has_walkable();
  inline void clear_has_walkable();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr character_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::int32 id_;
  bool transparent_;
  bool walkable_;
  friend void  protobuf_AddDesc_tiles_2eproto();
  friend void protobuf_AssignDesc_tiles_2eproto();
  friend void protobuf_ShutdownFile_tiles_2eproto();

  void InitAsDefaultInstance();
  static TileData* default_instance_;
};
// -------------------------------------------------------------------

class TilesData : public ::google::protobuf::Message {
 public:
  TilesData();
  virtual ~TilesData();

  TilesData(const TilesData& from);

  inline TilesData& operator=(const TilesData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TilesData& default_instance();

  void Swap(TilesData* other);

  // implements Message ----------------------------------------------

  inline TilesData* New() const { return New(NULL); }

  TilesData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TilesData& from);
  void MergeFrom(const TilesData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TilesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .amarlon.TileData tile = 1;
  int tile_size() const;
  void clear_tile();
  static const int kTileFieldNumber = 1;
  const ::amarlon::TileData& tile(int index) const;
  ::amarlon::TileData* mutable_tile(int index);
  ::amarlon::TileData* add_tile();
  ::google::protobuf::RepeatedPtrField< ::amarlon::TileData >*
      mutable_tile();
  const ::google::protobuf::RepeatedPtrField< ::amarlon::TileData >&
      tile() const;

  // @@protoc_insertion_point(class_scope:amarlon.TilesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::TileData > tile_;
  friend void  protobuf_AddDesc_tiles_2eproto();
  friend void protobuf_AssignDesc_tiles_2eproto();
  friend void protobuf_ShutdownFile_tiles_2eproto();

  void InitAsDefaultInstance();
  static TilesData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TileData

// required int32 id = 1;
inline bool TileData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TileData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.id)
  return id_;
}
inline void TileData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.id)
}

// required string name = 2;
inline bool TileData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TileData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.name)
}
inline void TileData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.name)
}
inline void TileData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.name)
}
inline ::std::string* TileData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileData::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.name)
}

// required string character = 3;
inline bool TileData::has_character() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TileData::set_has_character() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TileData::clear_has_character() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TileData::clear_character() {
  character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_character();
}
inline const ::std::string& TileData::character() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.character)
  return character_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_character(const ::std::string& value) {
  set_has_character();
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.character)
}
inline void TileData::set_character(const char* value) {
  set_has_character();
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.character)
}
inline void TileData::set_character(const char* value, size_t size) {
  set_has_character();
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.character)
}
inline ::std::string* TileData::mutable_character() {
  set_has_character();
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.character)
  return character_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileData::release_character() {
  clear_has_character();
  return character_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_allocated_character(::std::string* character) {
  if (character != NULL) {
    set_has_character();
  } else {
    clear_has_character();
  }
  character_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), character);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.character)
}

// required string color = 4;
inline bool TileData::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TileData::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TileData::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TileData::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& TileData::color() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.color)
}
inline void TileData::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.color)
}
inline void TileData::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.color)
}
inline ::std::string* TileData::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileData::release_color() {
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.color)
}

// required bool transparent = 5;
inline bool TileData::has_transparent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TileData::set_has_transparent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TileData::clear_has_transparent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TileData::clear_transparent() {
  transparent_ = false;
  clear_has_transparent();
}
inline bool TileData::transparent() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.transparent)
  return transparent_;
}
inline void TileData::set_transparent(bool value) {
  set_has_transparent();
  transparent_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.transparent)
}

// required bool walkable = 6;
inline bool TileData::has_walkable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TileData::set_has_walkable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TileData::clear_has_walkable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TileData::clear_walkable() {
  walkable_ = false;
  clear_has_walkable();
}
inline bool TileData::walkable() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.walkable)
  return walkable_;
}
inline void TileData::set_walkable(bool value) {
  set_has_walkable();
  walkable_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.walkable)
}

// -------------------------------------------------------------------

// TilesData

// repeated .amarlon.TileData tile = 1;
inline int TilesData::tile_size() const {
  return tile_.size();
}
inline void TilesData::clear_tile() {
  tile_.Clear();
}
inline const ::amarlon::TileData& TilesData::tile(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.TilesData.tile)
  return tile_.Get(index);
}
inline ::amarlon::TileData* TilesData::mutable_tile(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.TilesData.tile)
  return tile_.Mutable(index);
}
inline ::amarlon::TileData* TilesData::add_tile() {
  // @@protoc_insertion_point(field_add:amarlon.TilesData.tile)
  return tile_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::TileData >*
TilesData::mutable_tile() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.TilesData.tile)
  return &tile_;
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::TileData >&
TilesData::tile() const {
  // @@protoc_insertion_point(field_list:amarlon.TilesData.tile)
  return tile_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tiles_2eproto__INCLUDED
