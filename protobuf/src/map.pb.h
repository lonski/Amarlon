// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto__INCLUDED
#define PROTOBUF_map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "actor.pb.h"
#include "tile.pb.h"
// @@protoc_insertion_point(includes)

namespace amarlon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_map_2eproto();
void protobuf_AssignDesc_map_2eproto();
void protobuf_ShutdownFile_map_2eproto();

class TeleportActionData;
class MapData;
class MapsData;
class WorldData;

// ===================================================================

class TeleportActionData : public ::google::protobuf::Message {
 public:
  TeleportActionData();
  virtual ~TeleportActionData();

  TeleportActionData(const TeleportActionData& from);

  inline TeleportActionData& operator=(const TeleportActionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeleportActionData& default_instance();

  void Swap(TeleportActionData* other);

  // implements Message ----------------------------------------------

  TeleportActionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeleportActionData& from);
  void MergeFrom(const TeleportActionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:amarlon.TeleportActionData)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_direction();
  inline void clear_has_direction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 direction_;
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static TeleportActionData* default_instance_;
};
// -------------------------------------------------------------------

class MapData : public ::google::protobuf::Message {
 public:
  MapData();
  virtual ~MapData();

  MapData(const MapData& from);

  inline MapData& operator=(const MapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapData& default_instance();

  void Swap(MapData* other);

  // implements Message ----------------------------------------------

  MapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapData& from);
  void MergeFrom(const MapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // repeated .amarlon.TileState tiles = 4;
  inline int tiles_size() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 4;
  inline const ::amarlon::TileState& tiles(int index) const;
  inline ::amarlon::TileState* mutable_tiles(int index);
  inline ::amarlon::TileState* add_tiles();
  inline const ::google::protobuf::RepeatedPtrField< ::amarlon::TileState >&
      tiles() const;
  inline ::google::protobuf::RepeatedPtrField< ::amarlon::TileState >*
      mutable_tiles();

  // repeated .amarlon.TeleportActionData teleports = 5;
  inline int teleports_size() const;
  inline void clear_teleports();
  static const int kTeleportsFieldNumber = 5;
  inline const ::amarlon::TeleportActionData& teleports(int index) const;
  inline ::amarlon::TeleportActionData* mutable_teleports(int index);
  inline ::amarlon::TeleportActionData* add_teleports();
  inline const ::google::protobuf::RepeatedPtrField< ::amarlon::TeleportActionData >&
      teleports() const;
  inline ::google::protobuf::RepeatedPtrField< ::amarlon::TeleportActionData >*
      mutable_teleports();

  // repeated .amarlon.ActorData actors = 6;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 6;
  inline const ::amarlon::ActorData& actors(int index) const;
  inline ::amarlon::ActorData* mutable_actors(int index);
  inline ::amarlon::ActorData* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::amarlon::ActorData >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::amarlon::ActorData >*
      mutable_actors();

  // @@protoc_insertion_point(class_scope:amarlon.MapData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::TileState > tiles_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::TeleportActionData > teleports_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::ActorData > actors_;
  ::google::protobuf::int32 height_;
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static MapData* default_instance_;
};
// -------------------------------------------------------------------

class MapsData : public ::google::protobuf::Message {
 public:
  MapsData();
  virtual ~MapsData();

  MapsData(const MapsData& from);

  inline MapsData& operator=(const MapsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapsData& default_instance();

  void Swap(MapsData* other);

  // implements Message ----------------------------------------------

  MapsData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapsData& from);
  void MergeFrom(const MapsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .amarlon.MapData map = 1;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 1;
  inline const ::amarlon::MapData& map(int index) const;
  inline ::amarlon::MapData* mutable_map(int index);
  inline ::amarlon::MapData* add_map();
  inline const ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >&
      map() const;
  inline ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:amarlon.MapsData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::MapData > map_;
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static MapsData* default_instance_;
};
// -------------------------------------------------------------------

class WorldData : public ::google::protobuf::Message {
 public:
  WorldData();
  virtual ~WorldData();

  WorldData(const WorldData& from);

  inline WorldData& operator=(const WorldData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldData& default_instance();

  void Swap(WorldData* other);

  // implements Message ----------------------------------------------

  WorldData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldData& from);
  void MergeFrom(const WorldData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 current_map = 1;
  inline bool has_current_map() const;
  inline void clear_current_map();
  static const int kCurrentMapFieldNumber = 1;
  inline ::google::protobuf::int32 current_map() const;
  inline void set_current_map(::google::protobuf::int32 value);

  // optional .amarlon.ActorData player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::amarlon::ActorData& player() const;
  inline ::amarlon::ActorData* mutable_player();
  inline ::amarlon::ActorData* release_player();
  inline void set_allocated_player(::amarlon::ActorData* player);

  // repeated .amarlon.MapData map = 3;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline const ::amarlon::MapData& map(int index) const;
  inline ::amarlon::MapData* mutable_map(int index);
  inline ::amarlon::MapData* add_map();
  inline const ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >&
      map() const;
  inline ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:amarlon.WorldData)
 private:
  inline void set_has_current_map();
  inline void clear_has_current_map();
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::amarlon::ActorData* player_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::MapData > map_;
  ::google::protobuf::int32 current_map_;
  friend void  protobuf_AddDesc_map_2eproto();
  friend void protobuf_AssignDesc_map_2eproto();
  friend void protobuf_ShutdownFile_map_2eproto();

  void InitAsDefaultInstance();
  static WorldData* default_instance_;
};
// ===================================================================


// ===================================================================

// TeleportActionData

// optional int32 map_id = 1;
inline bool TeleportActionData::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeleportActionData::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeleportActionData::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeleportActionData::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 TeleportActionData::map_id() const {
  // @@protoc_insertion_point(field_get:amarlon.TeleportActionData.map_id)
  return map_id_;
}
inline void TeleportActionData::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TeleportActionData.map_id)
}

// optional int32 x = 2;
inline bool TeleportActionData::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeleportActionData::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeleportActionData::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeleportActionData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TeleportActionData::x() const {
  // @@protoc_insertion_point(field_get:amarlon.TeleportActionData.x)
  return x_;
}
inline void TeleportActionData::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TeleportActionData.x)
}

// optional int32 y = 3;
inline bool TeleportActionData::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeleportActionData::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeleportActionData::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeleportActionData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TeleportActionData::y() const {
  // @@protoc_insertion_point(field_get:amarlon.TeleportActionData.y)
  return y_;
}
inline void TeleportActionData::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TeleportActionData.y)
}

// optional int32 direction = 4;
inline bool TeleportActionData::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeleportActionData::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeleportActionData::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeleportActionData::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 TeleportActionData::direction() const {
  // @@protoc_insertion_point(field_get:amarlon.TeleportActionData.direction)
  return direction_;
}
inline void TeleportActionData::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TeleportActionData.direction)
}

// -------------------------------------------------------------------

// MapData

// optional int32 id = 1;
inline bool MapData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MapData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.id)
  return id_;
}
inline void MapData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.MapData.id)
}

// optional int32 width = 2;
inline bool MapData::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapData::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapData::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapData::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MapData::width() const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.width)
  return width_;
}
inline void MapData::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:amarlon.MapData.width)
}

// optional int32 height = 3;
inline bool MapData::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapData::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapData::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MapData::height() const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.height)
  return height_;
}
inline void MapData::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:amarlon.MapData.height)
}

// repeated .amarlon.TileState tiles = 4;
inline int MapData::tiles_size() const {
  return tiles_.size();
}
inline void MapData::clear_tiles() {
  tiles_.Clear();
}
inline const ::amarlon::TileState& MapData::tiles(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.tiles)
  return tiles_.Get(index);
}
inline ::amarlon::TileState* MapData::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.MapData.tiles)
  return tiles_.Mutable(index);
}
inline ::amarlon::TileState* MapData::add_tiles() {
  // @@protoc_insertion_point(field_add:amarlon.MapData.tiles)
  return tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::TileState >&
MapData::tiles() const {
  // @@protoc_insertion_point(field_list:amarlon.MapData.tiles)
  return tiles_;
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::TileState >*
MapData::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.MapData.tiles)
  return &tiles_;
}

// repeated .amarlon.TeleportActionData teleports = 5;
inline int MapData::teleports_size() const {
  return teleports_.size();
}
inline void MapData::clear_teleports() {
  teleports_.Clear();
}
inline const ::amarlon::TeleportActionData& MapData::teleports(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.teleports)
  return teleports_.Get(index);
}
inline ::amarlon::TeleportActionData* MapData::mutable_teleports(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.MapData.teleports)
  return teleports_.Mutable(index);
}
inline ::amarlon::TeleportActionData* MapData::add_teleports() {
  // @@protoc_insertion_point(field_add:amarlon.MapData.teleports)
  return teleports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::TeleportActionData >&
MapData::teleports() const {
  // @@protoc_insertion_point(field_list:amarlon.MapData.teleports)
  return teleports_;
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::TeleportActionData >*
MapData::mutable_teleports() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.MapData.teleports)
  return &teleports_;
}

// repeated .amarlon.ActorData actors = 6;
inline int MapData::actors_size() const {
  return actors_.size();
}
inline void MapData::clear_actors() {
  actors_.Clear();
}
inline const ::amarlon::ActorData& MapData::actors(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.MapData.actors)
  return actors_.Get(index);
}
inline ::amarlon::ActorData* MapData::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.MapData.actors)
  return actors_.Mutable(index);
}
inline ::amarlon::ActorData* MapData::add_actors() {
  // @@protoc_insertion_point(field_add:amarlon.MapData.actors)
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::ActorData >&
MapData::actors() const {
  // @@protoc_insertion_point(field_list:amarlon.MapData.actors)
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::ActorData >*
MapData::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.MapData.actors)
  return &actors_;
}

// -------------------------------------------------------------------

// MapsData

// repeated .amarlon.MapData map = 1;
inline int MapsData::map_size() const {
  return map_.size();
}
inline void MapsData::clear_map() {
  map_.Clear();
}
inline const ::amarlon::MapData& MapsData::map(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.MapsData.map)
  return map_.Get(index);
}
inline ::amarlon::MapData* MapsData::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.MapsData.map)
  return map_.Mutable(index);
}
inline ::amarlon::MapData* MapsData::add_map() {
  // @@protoc_insertion_point(field_add:amarlon.MapsData.map)
  return map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >&
MapsData::map() const {
  // @@protoc_insertion_point(field_list:amarlon.MapsData.map)
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >*
MapsData::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.MapsData.map)
  return &map_;
}

// -------------------------------------------------------------------

// WorldData

// optional int32 current_map = 1;
inline bool WorldData::has_current_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldData::set_has_current_map() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldData::clear_has_current_map() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldData::clear_current_map() {
  current_map_ = 0;
  clear_has_current_map();
}
inline ::google::protobuf::int32 WorldData::current_map() const {
  // @@protoc_insertion_point(field_get:amarlon.WorldData.current_map)
  return current_map_;
}
inline void WorldData::set_current_map(::google::protobuf::int32 value) {
  set_has_current_map();
  current_map_ = value;
  // @@protoc_insertion_point(field_set:amarlon.WorldData.current_map)
}

// optional .amarlon.ActorData player = 2;
inline bool WorldData::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldData::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldData::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldData::clear_player() {
  if (player_ != NULL) player_->::amarlon::ActorData::Clear();
  clear_has_player();
}
inline const ::amarlon::ActorData& WorldData::player() const {
  // @@protoc_insertion_point(field_get:amarlon.WorldData.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::amarlon::ActorData* WorldData::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::amarlon::ActorData;
  // @@protoc_insertion_point(field_mutable:amarlon.WorldData.player)
  return player_;
}
inline ::amarlon::ActorData* WorldData::release_player() {
  clear_has_player();
  ::amarlon::ActorData* temp = player_;
  player_ = NULL;
  return temp;
}
inline void WorldData::set_allocated_player(::amarlon::ActorData* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:amarlon.WorldData.player)
}

// repeated .amarlon.MapData map = 3;
inline int WorldData::map_size() const {
  return map_.size();
}
inline void WorldData::clear_map() {
  map_.Clear();
}
inline const ::amarlon::MapData& WorldData::map(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.WorldData.map)
  return map_.Get(index);
}
inline ::amarlon::MapData* WorldData::mutable_map(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.WorldData.map)
  return map_.Mutable(index);
}
inline ::amarlon::MapData* WorldData::add_map() {
  // @@protoc_insertion_point(field_add:amarlon.WorldData.map)
  return map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >&
WorldData::map() const {
  // @@protoc_insertion_point(field_list:amarlon.WorldData.map)
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::MapData >*
WorldData::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.WorldData.map)
  return &map_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto__INCLUDED
