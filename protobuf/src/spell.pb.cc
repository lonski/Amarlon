// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spell.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spell.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

namespace {

const ::google::protobuf::Descriptor* SpellData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpellData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpellsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpellsData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spell_2eproto() {
  protobuf_AddDesc_spell_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spell.proto");
  GOOGLE_CHECK(file != NULL);
  SpellData_descriptor_ = file->message_type(0);
  static const int SpellData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, char_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, target_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, passive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, range_),
  };
  SpellData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpellData_descriptor_,
      SpellData::default_instance_,
      SpellData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpellData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellData, _internal_metadata_),
      -1);
  SpellsData_descriptor_ = file->message_type(1);
  static const int SpellsData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellsData, spell_),
  };
  SpellsData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpellsData_descriptor_,
      SpellsData::default_instance_,
      SpellsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellsData, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpellsData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpellsData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spell_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpellData_descriptor_, &SpellData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpellsData_descriptor_, &SpellsData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spell_2eproto() {
  delete SpellData::default_instance_;
  delete SpellData_reflection_;
  delete SpellsData::default_instance_;
  delete SpellsData_reflection_;
}

void protobuf_AddDesc_spell_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013spell.proto\022\007amarlon\"\257\001\n\tSpellData\022\n\n\002"
    "id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\022\n\nchar_class\030\003 "
    "\002(\005\022\023\n\013target_type\030\004 \002(\005\022\014\n\004name\030\005 \002(\t\022\023"
    "\n\013description\030\006 \002(\t\022\026\n\007passive\030\007 \001(\010:\005fa"
    "lse\022\021\n\006radius\030\010 \001(\005:\0010\022\020\n\005range\030\t \001(\005:\0010"
    "\"/\n\nSpellsData\022!\n\005spell\030\001 \003(\0132\022.amarlon."
    "SpellData", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spell.proto", &protobuf_RegisterTypes);
  SpellData::default_instance_ = new SpellData();
  SpellsData::default_instance_ = new SpellsData();
  SpellData::default_instance_->InitAsDefaultInstance();
  SpellsData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spell_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spell_2eproto {
  StaticDescriptorInitializer_spell_2eproto() {
    protobuf_AddDesc_spell_2eproto();
  }
} static_descriptor_initializer_spell_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpellData::kIdFieldNumber;
const int SpellData::kLevelFieldNumber;
const int SpellData::kCharClassFieldNumber;
const int SpellData::kTargetTypeFieldNumber;
const int SpellData::kNameFieldNumber;
const int SpellData::kDescriptionFieldNumber;
const int SpellData::kPassiveFieldNumber;
const int SpellData::kRadiusFieldNumber;
const int SpellData::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpellData::SpellData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.SpellData)
}

void SpellData::InitAsDefaultInstance() {
}

SpellData::SpellData(const SpellData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.SpellData)
}

void SpellData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  char_class_ = 0;
  target_type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passive_ = false;
  radius_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpellData::~SpellData() {
  // @@protoc_insertion_point(destructor:amarlon.SpellData)
  SharedDtor();
}

void SpellData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SpellData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellData_descriptor_;
}

const SpellData& SpellData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spell_2eproto();
  return *default_instance_;
}

SpellData* SpellData::default_instance_ = NULL;

SpellData* SpellData::New(::google::protobuf::Arena* arena) const {
  SpellData* n = new SpellData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpellData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpellData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, target_type_);
    ZR_(passive_, radius_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  range_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpellData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.SpellData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_char_class;
        break;
      }

      // required int32 char_class = 3;
      case 3: {
        if (tag == 24) {
         parse_char_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_class_)));
          set_has_char_class();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_type;
        break;
      }

      // required int32 target_type = 4;
      case 4: {
        if (tag == 32) {
         parse_target_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_type_)));
          set_has_target_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.SpellData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // required string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "amarlon.SpellData.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_passive;
        break;
      }

      // optional bool passive = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_passive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_)));
          set_has_passive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_radius;
        break;
      }

      // optional int32 radius = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_range;
        break;
      }

      // optional int32 range = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.SpellData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.SpellData)
  return false;
#undef DO_
}

void SpellData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.SpellData)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 char_class = 3;
  if (has_char_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->char_class(), output);
  }

  // required int32 target_type = 4;
  if (has_target_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_type(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.SpellData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.SpellData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional bool passive = 7 [default = false];
  if (has_passive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->passive(), output);
  }

  // optional int32 radius = 8 [default = 0];
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->radius(), output);
  }

  // optional int32 range = 9 [default = 0];
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.SpellData)
}

::google::protobuf::uint8* SpellData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.SpellData)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 char_class = 3;
  if (has_char_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->char_class(), target);
  }

  // required int32 target_type = 4;
  if (has_target_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_type(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.SpellData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "amarlon.SpellData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional bool passive = 7 [default = false];
  if (has_passive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->passive(), target);
  }

  // optional int32 radius = 8 [default = 0];
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->radius(), target);
  }

  // optional int32 range = 9 [default = 0];
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.SpellData)
  return target;
}

int SpellData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_char_class()) {
    // required int32 char_class = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_class());
  }

  if (has_target_type()) {
    // required int32 target_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_type());
  }

  if (has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_description()) {
    // required string description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  return total_size;
}
int SpellData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 char_class = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->char_class());

    // required int32 target_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_type());

    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string description = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional bool passive = 7 [default = false];
    if (has_passive()) {
      total_size += 1 + 1;
    }

    // optional int32 radius = 8 [default = 0];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

  }
  // optional int32 range = 9 [default = 0];
  if (has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpellData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpellData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpellData::MergeFrom(const SpellData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_char_class()) {
      set_char_class(from.char_class());
    }
    if (from.has_target_type()) {
      set_target_type(from.target_type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_passive()) {
      set_passive(from.passive());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpellData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellData::CopyFrom(const SpellData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SpellData::Swap(SpellData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpellData::InternalSwap(SpellData* other) {
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(char_class_, other->char_class_);
  std::swap(target_type_, other->target_type_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  std::swap(passive_, other->passive_);
  std::swap(radius_, other->radius_);
  std::swap(range_, other->range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpellData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpellData_descriptor_;
  metadata.reflection = SpellData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellData

// required int32 id = 1;
bool SpellData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpellData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SpellData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpellData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 SpellData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.id)
  return id_;
}
 void SpellData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.id)
}

// required int32 level = 2;
bool SpellData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpellData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void SpellData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpellData::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 SpellData::level() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.level)
  return level_;
}
 void SpellData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.level)
}

// required int32 char_class = 3;
bool SpellData::has_char_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpellData::set_has_char_class() {
  _has_bits_[0] |= 0x00000004u;
}
void SpellData::clear_has_char_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpellData::clear_char_class() {
  char_class_ = 0;
  clear_has_char_class();
}
 ::google::protobuf::int32 SpellData::char_class() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.char_class)
  return char_class_;
}
 void SpellData::set_char_class(::google::protobuf::int32 value) {
  set_has_char_class();
  char_class_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.char_class)
}

// required int32 target_type = 4;
bool SpellData::has_target_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpellData::set_has_target_type() {
  _has_bits_[0] |= 0x00000008u;
}
void SpellData::clear_has_target_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpellData::clear_target_type() {
  target_type_ = 0;
  clear_has_target_type();
}
 ::google::protobuf::int32 SpellData::target_type() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.target_type)
  return target_type_;
}
 void SpellData::set_target_type(::google::protobuf::int32 value) {
  set_has_target_type();
  target_type_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.target_type)
}

// required string name = 5;
bool SpellData::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpellData::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
void SpellData::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpellData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& SpellData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpellData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.SpellData.name)
}
 void SpellData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.SpellData.name)
}
 void SpellData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.SpellData.name)
}
 ::std::string* SpellData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:amarlon.SpellData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpellData::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpellData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.SpellData.name)
}

// required string description = 6;
bool SpellData::has_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpellData::set_has_description() {
  _has_bits_[0] |= 0x00000020u;
}
void SpellData::clear_has_description() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpellData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& SpellData::description() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpellData::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.SpellData.description)
}
 void SpellData::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.SpellData.description)
}
 void SpellData::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.SpellData.description)
}
 ::std::string* SpellData::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:amarlon.SpellData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpellData::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpellData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:amarlon.SpellData.description)
}

// optional bool passive = 7 [default = false];
bool SpellData::has_passive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SpellData::set_has_passive() {
  _has_bits_[0] |= 0x00000040u;
}
void SpellData::clear_has_passive() {
  _has_bits_[0] &= ~0x00000040u;
}
void SpellData::clear_passive() {
  passive_ = false;
  clear_has_passive();
}
 bool SpellData::passive() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.passive)
  return passive_;
}
 void SpellData::set_passive(bool value) {
  set_has_passive();
  passive_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.passive)
}

// optional int32 radius = 8 [default = 0];
bool SpellData::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SpellData::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void SpellData::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void SpellData::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 ::google::protobuf::int32 SpellData::radius() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.radius)
  return radius_;
}
 void SpellData::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.radius)
}

// optional int32 range = 9 [default = 0];
bool SpellData::has_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SpellData::set_has_range() {
  _has_bits_[0] |= 0x00000100u;
}
void SpellData::clear_has_range() {
  _has_bits_[0] &= ~0x00000100u;
}
void SpellData::clear_range() {
  range_ = 0;
  clear_has_range();
}
 ::google::protobuf::int32 SpellData::range() const {
  // @@protoc_insertion_point(field_get:amarlon.SpellData.range)
  return range_;
}
 void SpellData::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SpellData.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpellsData::kSpellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpellsData::SpellsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.SpellsData)
}

void SpellsData::InitAsDefaultInstance() {
}

SpellsData::SpellsData(const SpellsData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.SpellsData)
}

void SpellsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpellsData::~SpellsData() {
  // @@protoc_insertion_point(destructor:amarlon.SpellsData)
  SharedDtor();
}

void SpellsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpellsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpellsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpellsData_descriptor_;
}

const SpellsData& SpellsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spell_2eproto();
  return *default_instance_;
}

SpellsData* SpellsData::default_instance_ = NULL;

SpellsData* SpellsData::New(::google::protobuf::Arena* arena) const {
  SpellsData* n = new SpellsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpellsData::Clear() {
  spell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpellsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.SpellsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.SpellData spell = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_spell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_spell;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.SpellsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.SpellsData)
  return false;
#undef DO_
}

void SpellsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.SpellsData)
  // repeated .amarlon.SpellData spell = 1;
  for (unsigned int i = 0, n = this->spell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spell(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.SpellsData)
}

::google::protobuf::uint8* SpellsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.SpellsData)
  // repeated .amarlon.SpellData spell = 1;
  for (unsigned int i = 0, n = this->spell_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spell(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.SpellsData)
  return target;
}

int SpellsData::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.SpellData spell = 1;
  total_size += 1 * this->spell_size();
  for (int i = 0; i < this->spell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spell(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpellsData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpellsData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpellsData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpellsData::MergeFrom(const SpellsData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  spell_.MergeFrom(from.spell_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpellsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpellsData::CopyFrom(const SpellsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpellsData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->spell())) return false;
  return true;
}

void SpellsData::Swap(SpellsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpellsData::InternalSwap(SpellsData* other) {
  spell_.UnsafeArenaSwap(&other->spell_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpellsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpellsData_descriptor_;
  metadata.reflection = SpellsData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpellsData

// repeated .amarlon.SpellData spell = 1;
int SpellsData::spell_size() const {
  return spell_.size();
}
void SpellsData::clear_spell() {
  spell_.Clear();
}
const ::amarlon::SpellData& SpellsData::spell(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.SpellsData.spell)
  return spell_.Get(index);
}
::amarlon::SpellData* SpellsData::mutable_spell(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.SpellsData.spell)
  return spell_.Mutable(index);
}
::amarlon::SpellData* SpellsData::add_spell() {
  // @@protoc_insertion_point(field_add:amarlon.SpellsData.spell)
  return spell_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::SpellData >*
SpellsData::mutable_spell() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.SpellsData.spell)
  return &spell_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::SpellData >&
SpellsData::spell() const {
  // @@protoc_insertion_point(field_list:amarlon.SpellsData.spell)
  return spell_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
