// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

namespace {

const ::google::protobuf::Descriptor* TileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TilesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TilesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tile_2eproto() {
  protobuf_AddDesc_tile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tile.proto");
  GOOGLE_CHECK(file != NULL);
  TileData_descriptor_ = file->message_type(0);
  static const int TileData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, transparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, walkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, character_),
  };
  TileData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TileData_descriptor_,
      TileData::default_instance_,
      TileData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TileData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, _is_default_instance_));
  TilesData_descriptor_ = file->message_type(1);
  static const int TilesData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, tile_),
  };
  TilesData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TilesData_descriptor_,
      TilesData::default_instance_,
      TilesData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TilesData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, _is_default_instance_));
  TileState_descriptor_ = file->message_type(2);
  static const int TileState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, flags_),
  };
  TileState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TileState_descriptor_,
      TileState::default_instance_,
      TileState_offsets_,
      -1,
      -1,
      -1,
      sizeof(TileState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TileData_descriptor_, &TileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TilesData_descriptor_, &TilesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TileState_descriptor_, &TileState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tile_2eproto() {
  delete TileData::default_instance_;
  delete TileData_reflection_;
  delete TilesData::default_instance_;
  delete TilesData_reflection_;
  delete TileState::default_instance_;
  delete TileState_reflection_;
}

void protobuf_AddDesc_tile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntile.proto\022\007amarlon\"m\n\010TileData\022\n\n\002id\030"
    "\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\023\n\013transparent\030\003 \001(\010"
    "\022\r\n\005color\030\004 \001(\t\022\020\n\010walkable\030\005 \001(\010\022\021\n\tcha"
    "racter\030\006 \001(\t\",\n\tTilesData\022\037\n\004tile\030\001 \003(\0132"
    "\021.amarlon.TileData\"(\n\tTileState\022\014\n\004type\030"
    "\001 \001(\005\022\r\n\005flags\030\002 \001(\007b\006proto3", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tile.proto", &protobuf_RegisterTypes);
  TileData::default_instance_ = new TileData();
  TilesData::default_instance_ = new TilesData();
  TileState::default_instance_ = new TileState();
  TileData::default_instance_->InitAsDefaultInstance();
  TilesData::default_instance_->InitAsDefaultInstance();
  TileState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tile_2eproto {
  StaticDescriptorInitializer_tile_2eproto() {
    protobuf_AddDesc_tile_2eproto();
  }
} static_descriptor_initializer_tile_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileData::kIdFieldNumber;
const int TileData::kNameFieldNumber;
const int TileData::kTransparentFieldNumber;
const int TileData::kColorFieldNumber;
const int TileData::kWalkableFieldNumber;
const int TileData::kCharacterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileData::TileData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TileData)
}

void TileData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TileData::TileData(const TileData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TileData)
}

void TileData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transparent_ = false;
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  walkable_ = false;
  character_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TileData::~TileData() {
  // @@protoc_insertion_point(destructor:amarlon.TileData)
  SharedDtor();
}

void TileData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileData_descriptor_;
}

const TileData& TileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TileData* TileData::default_instance_ = NULL;

TileData* TileData::New(::google::protobuf::Arena* arena) const {
  TileData* n = new TileData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TileData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, walkable_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TileData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "amarlon.TileData.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transparent;
        break;
      }

      // optional bool transparent = 3;
      case 3: {
        if (tag == 24) {
         parse_transparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // optional string color = 4;
      case 4: {
        if (tag == 34) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "amarlon.TileData.color"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_walkable;
        break;
      }

      // optional bool walkable = 5;
      case 5: {
        if (tag == 40) {
         parse_walkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walkable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_character;
        break;
      }

      // optional string character = 6;
      case 6: {
        if (tag == 50) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->character().data(), this->character().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "amarlon.TileData.character"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TileData)
  return false;
#undef DO_
}

void TileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TileData)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool transparent = 3;
  if (this->transparent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transparent(), output);
  }

  // optional string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  // optional bool walkable = 5;
  if (this->walkable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->walkable(), output);
  }

  // optional string character = 6;
  if (this->character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->character().data(), this->character().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.character");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->character(), output);
  }

  // @@protoc_insertion_point(serialize_end:amarlon.TileData)
}

::google::protobuf::uint8* TileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TileData)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool transparent = 3;
  if (this->transparent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transparent(), target);
  }

  // optional string color = 4;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // optional bool walkable = 5;
  if (this->walkable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->walkable(), target);
  }

  // optional string character = 6;
  if (this->character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->character().data(), this->character().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "amarlon.TileData.character");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->character(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TileData)
  return target;
}

int TileData::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool transparent = 3;
  if (this->transparent() != 0) {
    total_size += 1 + 1;
  }

  // optional string color = 4;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // optional bool walkable = 5;
  if (this->walkable() != 0) {
    total_size += 1 + 1;
  }

  // optional string character = 6;
  if (this->character().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TileData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TileData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileData::MergeFrom(const TileData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.transparent() != 0) {
    set_transparent(from.transparent());
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.walkable() != 0) {
    set_walkable(from.walkable());
  }
  if (from.character().size() > 0) {

    character_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_);
  }
}

void TileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileData::CopyFrom(const TileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileData::IsInitialized() const {

  return true;
}

void TileData::Swap(TileData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileData::InternalSwap(TileData* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(transparent_, other->transparent_);
  color_.Swap(&other->color_);
  std::swap(walkable_, other->walkable_);
  character_.Swap(&other->character_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileData_descriptor_;
  metadata.reflection = TileData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileData

// optional int32 id = 1;
void TileData::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 TileData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.id)
  return id_;
}
 void TileData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.id)
}

// optional string name = 2;
void TileData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TileData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.name)
}
 void TileData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.name)
}
 void TileData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.name)
}
 ::std::string* TileData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TileData::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.name)
}

// optional bool transparent = 3;
void TileData::clear_transparent() {
  transparent_ = false;
}
 bool TileData::transparent() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.transparent)
  return transparent_;
}
 void TileData::set_transparent(bool value) {
  
  transparent_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.transparent)
}

// optional string color = 4;
void TileData::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TileData::color() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.color)
}
 void TileData::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.color)
}
 void TileData::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.color)
}
 ::std::string* TileData::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TileData::release_color() {
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.color)
}

// optional bool walkable = 5;
void TileData::clear_walkable() {
  walkable_ = false;
}
 bool TileData::walkable() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.walkable)
  return walkable_;
}
 void TileData::set_walkable(bool value) {
  
  walkable_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileData.walkable)
}

// optional string character = 6;
void TileData::clear_character() {
  character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TileData::character() const {
  // @@protoc_insertion_point(field_get:amarlon.TileData.character)
  return character_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_character(const ::std::string& value) {
  
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.TileData.character)
}
 void TileData::set_character(const char* value) {
  
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.TileData.character)
}
 void TileData::set_character(const char* value, size_t size) {
  
  character_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.TileData.character)
}
 ::std::string* TileData::mutable_character() {
  
  // @@protoc_insertion_point(field_mutable:amarlon.TileData.character)
  return character_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TileData::release_character() {
  
  return character_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TileData::set_allocated_character(::std::string* character) {
  if (character != NULL) {
    
  } else {
    
  }
  character_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), character);
  // @@protoc_insertion_point(field_set_allocated:amarlon.TileData.character)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TilesData::kTileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TilesData::TilesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TilesData)
}

void TilesData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TilesData::TilesData(const TilesData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TilesData)
}

void TilesData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TilesData::~TilesData() {
  // @@protoc_insertion_point(destructor:amarlon.TilesData)
  SharedDtor();
}

void TilesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TilesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TilesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TilesData_descriptor_;
}

const TilesData& TilesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TilesData* TilesData::default_instance_ = NULL;

TilesData* TilesData::New(::google::protobuf::Arena* arena) const {
  TilesData* n = new TilesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TilesData::Clear() {
  tile_.Clear();
}

bool TilesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TilesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.TileData tile = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tile;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TilesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TilesData)
  return false;
#undef DO_
}

void TilesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TilesData)
  // repeated .amarlon.TileData tile = 1;
  for (unsigned int i = 0, n = this->tile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tile(i), output);
  }

  // @@protoc_insertion_point(serialize_end:amarlon.TilesData)
}

::google::protobuf::uint8* TilesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TilesData)
  // repeated .amarlon.TileData tile = 1;
  for (unsigned int i = 0, n = this->tile_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tile(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TilesData)
  return target;
}

int TilesData::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.TileData tile = 1;
  total_size += 1 * this->tile_size();
  for (int i = 0; i < this->tile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TilesData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TilesData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TilesData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TilesData::MergeFrom(const TilesData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tile_.MergeFrom(from.tile_);
}

void TilesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TilesData::CopyFrom(const TilesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TilesData::IsInitialized() const {

  return true;
}

void TilesData::Swap(TilesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TilesData::InternalSwap(TilesData* other) {
  tile_.UnsafeArenaSwap(&other->tile_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TilesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TilesData_descriptor_;
  metadata.reflection = TilesData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TilesData

// repeated .amarlon.TileData tile = 1;
int TilesData::tile_size() const {
  return tile_.size();
}
void TilesData::clear_tile() {
  tile_.Clear();
}
const ::amarlon::TileData& TilesData::tile(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.TilesData.tile)
  return tile_.Get(index);
}
::amarlon::TileData* TilesData::mutable_tile(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.TilesData.tile)
  return tile_.Mutable(index);
}
::amarlon::TileData* TilesData::add_tile() {
  // @@protoc_insertion_point(field_add:amarlon.TilesData.tile)
  return tile_.Add();
}
::google::protobuf::RepeatedPtrField< ::amarlon::TileData >*
TilesData::mutable_tile() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.TilesData.tile)
  return &tile_;
}
const ::google::protobuf::RepeatedPtrField< ::amarlon::TileData >&
TilesData::tile() const {
  // @@protoc_insertion_point(field_list:amarlon.TilesData.tile)
  return tile_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileState::kTypeFieldNumber;
const int TileState::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileState::TileState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TileState)
}

void TileState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TileState::TileState(const TileState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TileState)
}

void TileState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  flags_ = 0u;
}

TileState::~TileState() {
  // @@protoc_insertion_point(destructor:amarlon.TileState)
  SharedDtor();
}

void TileState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileState_descriptor_;
}

const TileState& TileState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TileState* TileState::default_instance_ = NULL;

TileState* TileState::New(::google::protobuf::Arena* arena) const {
  TileState* n = new TileState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TileState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TileState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, flags_);

#undef ZR_HELPER_
#undef ZR_

}

bool TileState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TileState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_flags;
        break;
      }

      // optional fixed32 flags = 2;
      case 2: {
        if (tag == 21) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TileState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TileState)
  return false;
#undef DO_
}

void TileState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TileState)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional fixed32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:amarlon.TileState)
}

::google::protobuf::uint8* TileState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TileState)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional fixed32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TileState)
  return target;
}

int TileState::ByteSize() const {
  int total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional fixed32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TileState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TileState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileState::MergeFrom(const TileState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void TileState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileState::CopyFrom(const TileState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileState::IsInitialized() const {

  return true;
}

void TileState::Swap(TileState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileState::InternalSwap(TileState* other) {
  std::swap(type_, other->type_);
  std::swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TileState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileState_descriptor_;
  metadata.reflection = TileState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TileState

// optional int32 type = 1;
void TileState::clear_type() {
  type_ = 0;
}
 ::google::protobuf::int32 TileState::type() const {
  // @@protoc_insertion_point(field_get:amarlon.TileState.type)
  return type_;
}
 void TileState::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileState.type)
}

// optional fixed32 flags = 2;
void TileState::clear_flags() {
  flags_ = 0u;
}
 ::google::protobuf::uint32 TileState::flags() const {
  // @@protoc_insertion_point(field_get:amarlon.TileState.flags)
  return flags_;
}
 void TileState::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:amarlon.TileState.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
