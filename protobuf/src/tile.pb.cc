// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

namespace {

const ::google::protobuf::Descriptor* TileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TilesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TilesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TileState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TileState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tile_2eproto() {
  protobuf_AddDesc_tile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tile.proto");
  GOOGLE_CHECK(file != NULL);
  TileData_descriptor_ = file->message_type(0);
  static const int TileData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, transparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, walkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, character_),
  };
  TileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileData_descriptor_,
      TileData::default_instance_,
      TileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileData));
  TilesData_descriptor_ = file->message_type(1);
  static const int TilesData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, tile_),
  };
  TilesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TilesData_descriptor_,
      TilesData::default_instance_,
      TilesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TilesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TilesData));
  TileState_descriptor_ = file->message_type(2);
  static const int TileState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, flags_),
  };
  TileState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TileState_descriptor_,
      TileState::default_instance_,
      TileState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TileState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TileState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileData_descriptor_, &TileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TilesData_descriptor_, &TilesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TileState_descriptor_, &TileState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tile_2eproto() {
  delete TileData::default_instance_;
  delete TileData_reflection_;
  delete TilesData::default_instance_;
  delete TilesData_reflection_;
  delete TileState::default_instance_;
  delete TileState_reflection_;
}

void protobuf_AddDesc_tile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntile.proto\022\007amarlon\"{\n\010TileData\022\n\n\002id\030"
    "\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\032\n\013transparent\030\003 \001(\010"
    ":\005false\022\r\n\005color\030\004 \002(\t\022\027\n\010walkable\030\005 \001(\010"
    ":\005false\022\021\n\tcharacter\030\006 \002(\t\",\n\tTilesData\022"
    "\037\n\004tile\030\001 \003(\0132\021.amarlon.TileData\"(\n\tTile"
    "State\022\014\n\004type\030\001 \002(\005\022\r\n\005flags\030\002 \002(\007", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tile.proto", &protobuf_RegisterTypes);
  TileData::default_instance_ = new TileData();
  TilesData::default_instance_ = new TilesData();
  TileState::default_instance_ = new TileState();
  TileData::default_instance_->InitAsDefaultInstance();
  TilesData::default_instance_->InitAsDefaultInstance();
  TileState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tile_2eproto {
  StaticDescriptorInitializer_tile_2eproto() {
    protobuf_AddDesc_tile_2eproto();
  }
} static_descriptor_initializer_tile_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TileData::kIdFieldNumber;
const int TileData::kNameFieldNumber;
const int TileData::kTransparentFieldNumber;
const int TileData::kColorFieldNumber;
const int TileData::kWalkableFieldNumber;
const int TileData::kCharacterFieldNumber;
#endif  // !_MSC_VER

TileData::TileData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TileData)
}

void TileData::InitAsDefaultInstance() {
}

TileData::TileData(const TileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TileData)
}

void TileData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transparent_ = false;
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  walkable_ = false;
  character_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileData::~TileData() {
  // @@protoc_insertion_point(destructor:amarlon.TileData)
  SharedDtor();
}

void TileData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (character_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete character_;
  }
  if (this != default_instance_) {
  }
}

void TileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileData_descriptor_;
}

const TileData& TileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TileData* TileData::default_instance_ = NULL;

TileData* TileData::New() const {
  return new TileData;
}

void TileData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TileData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, walkable_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
    if (has_character()) {
      if (character_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        character_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TileData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transparent;
        break;
      }

      // optional bool transparent = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_transparent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
          set_has_transparent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // required string color = 4;
      case 4: {
        if (tag == 34) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_walkable;
        break;
      }

      // optional bool walkable = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_walkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &walkable_)));
          set_has_walkable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_character;
        break;
      }

      // required string character = 6;
      case 6: {
        if (tag == 50) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->character().data(), this->character().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "character");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TileData)
  return false;
#undef DO_
}

void TileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TileData)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool transparent = 3 [default = false];
  if (has_transparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transparent(), output);
  }

  // required string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->color(), output);
  }

  // optional bool walkable = 5 [default = false];
  if (has_walkable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->walkable(), output);
  }

  // required string character = 6;
  if (has_character()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character().data(), this->character().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "character");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->character(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.TileData)
}

::google::protobuf::uint8* TileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TileData)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool transparent = 3 [default = false];
  if (has_transparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transparent(), target);
  }

  // required string color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->color(), target);
  }

  // optional bool walkable = 5 [default = false];
  if (has_walkable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->walkable(), target);
  }

  // required string character = 6;
  if (has_character()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character().data(), this->character().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "character");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->character(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TileData)
  return target;
}

int TileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool transparent = 3 [default = false];
    if (has_transparent()) {
      total_size += 1 + 1;
    }

    // required string color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional bool walkable = 5 [default = false];
    if (has_walkable()) {
      total_size += 1 + 1;
    }

    // required string character = 6;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->character());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileData::MergeFrom(const TileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_transparent()) {
      set_transparent(from.transparent());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_walkable()) {
      set_walkable(from.walkable());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileData::CopyFrom(const TileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002b) != 0x0000002b) return false;

  return true;
}

void TileData::Swap(TileData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(transparent_, other->transparent_);
    std::swap(color_, other->color_);
    std::swap(walkable_, other->walkable_);
    std::swap(character_, other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileData_descriptor_;
  metadata.reflection = TileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TilesData::kTileFieldNumber;
#endif  // !_MSC_VER

TilesData::TilesData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TilesData)
}

void TilesData::InitAsDefaultInstance() {
}

TilesData::TilesData(const TilesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TilesData)
}

void TilesData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TilesData::~TilesData() {
  // @@protoc_insertion_point(destructor:amarlon.TilesData)
  SharedDtor();
}

void TilesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TilesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TilesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TilesData_descriptor_;
}

const TilesData& TilesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TilesData* TilesData::default_instance_ = NULL;

TilesData* TilesData::New() const {
  return new TilesData;
}

void TilesData::Clear() {
  tile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TilesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TilesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .amarlon.TileData tile = 1;
      case 1: {
        if (tag == 10) {
         parse_tile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tile;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TilesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TilesData)
  return false;
#undef DO_
}

void TilesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TilesData)
  // repeated .amarlon.TileData tile = 1;
  for (int i = 0; i < this->tile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tile(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.TilesData)
}

::google::protobuf::uint8* TilesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TilesData)
  // repeated .amarlon.TileData tile = 1;
  for (int i = 0; i < this->tile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tile(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TilesData)
  return target;
}

int TilesData::ByteSize() const {
  int total_size = 0;

  // repeated .amarlon.TileData tile = 1;
  total_size += 1 * this->tile_size();
  for (int i = 0; i < this->tile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tile(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TilesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TilesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TilesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TilesData::MergeFrom(const TilesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tile_.MergeFrom(from.tile_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TilesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TilesData::CopyFrom(const TilesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TilesData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tile())) return false;
  return true;
}

void TilesData::Swap(TilesData* other) {
  if (other != this) {
    tile_.Swap(&other->tile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TilesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TilesData_descriptor_;
  metadata.reflection = TilesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TileState::kTypeFieldNumber;
const int TileState::kFlagsFieldNumber;
#endif  // !_MSC_VER

TileState::TileState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.TileState)
}

void TileState::InitAsDefaultInstance() {
}

TileState::TileState(const TileState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.TileState)
}

void TileState::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TileState::~TileState() {
  // @@protoc_insertion_point(destructor:amarlon.TileState)
  SharedDtor();
}

void TileState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TileState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TileState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TileState_descriptor_;
}

const TileState& TileState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_2eproto();
  return *default_instance_;
}

TileState* TileState::default_instance_ = NULL;

TileState* TileState::New() const {
  return new TileState;
}

void TileState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TileState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, flags_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TileState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.TileState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_flags;
        break;
      }

      // required fixed32 flags = 2;
      case 2: {
        if (tag == 21) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.TileState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.TileState)
  return false;
#undef DO_
}

void TileState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.TileState)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required fixed32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.TileState)
}

::google::protobuf::uint8* TileState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.TileState)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required fixed32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.TileState)
  return target;
}

int TileState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required fixed32 flags = 2;
    if (has_flags()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TileState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TileState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TileState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TileState::MergeFrom(const TileState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TileState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileState::CopyFrom(const TileState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TileState::Swap(TileState* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TileState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TileState_descriptor_;
  metadata.reflection = TileState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
