// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

namespace {

const ::google::protobuf::Descriptor* ItemTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemTypeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_5ftype_2eproto() {
  protobuf_AddDesc_item_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item_type.proto");
  GOOGLE_CHECK(file != NULL);
  ItemTypeData_descriptor_ = file->message_type(0);
  static const int ItemTypeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, amunition_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, armor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, weapon_type_),
  };
  ItemTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemTypeData_descriptor_,
      ItemTypeData::default_instance_,
      ItemTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemTypeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemTypeData_descriptor_, &ItemTypeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_5ftype_2eproto() {
  delete ItemTypeData::default_instance_;
  delete ItemTypeData_reflection_;
}

void protobuf_AddDesc_item_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017item_type.proto\022\007amarlon\"a\n\014ItemTypeDa"
    "ta\022\020\n\010category\030\001 \002(\005\022\026\n\016amunition_type\030\002"
    " \002(\005\022\022\n\narmor_type\030\003 \002(\005\022\023\n\013weapon_type\030"
    "\004 \002(\005", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item_type.proto", &protobuf_RegisterTypes);
  ItemTypeData::default_instance_ = new ItemTypeData();
  ItemTypeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_5ftype_2eproto {
  StaticDescriptorInitializer_item_5ftype_2eproto() {
    protobuf_AddDesc_item_5ftype_2eproto();
  }
} static_descriptor_initializer_item_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemTypeData::kCategoryFieldNumber;
const int ItemTypeData::kAmunitionTypeFieldNumber;
const int ItemTypeData::kArmorTypeFieldNumber;
const int ItemTypeData::kWeaponTypeFieldNumber;
#endif  // !_MSC_VER

ItemTypeData::ItemTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amarlon.ItemTypeData)
}

void ItemTypeData::InitAsDefaultInstance() {
}

ItemTypeData::ItemTypeData(const ItemTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:amarlon.ItemTypeData)
}

void ItemTypeData::SharedCtor() {
  _cached_size_ = 0;
  category_ = 0;
  amunition_type_ = 0;
  armor_type_ = 0;
  weapon_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemTypeData::~ItemTypeData() {
  // @@protoc_insertion_point(destructor:amarlon.ItemTypeData)
  SharedDtor();
}

void ItemTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemTypeData_descriptor_;
}

const ItemTypeData& ItemTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_5ftype_2eproto();
  return *default_instance_;
}

ItemTypeData* ItemTypeData::default_instance_ = NULL;

ItemTypeData* ItemTypeData::New() const {
  return new ItemTypeData;
}

void ItemTypeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemTypeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(category_, weapon_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:amarlon.ItemTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 category = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amunition_type;
        break;
      }

      // required int32 amunition_type = 2;
      case 2: {
        if (tag == 16) {
         parse_amunition_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amunition_type_)));
          set_has_amunition_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_armor_type;
        break;
      }

      // required int32 armor_type = 3;
      case 3: {
        if (tag == 24) {
         parse_armor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_type_)));
          set_has_armor_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weapon_type;
        break;
      }

      // required int32 weapon_type = 4;
      case 4: {
        if (tag == 32) {
         parse_weapon_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_type_)));
          set_has_weapon_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:amarlon.ItemTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:amarlon.ItemTypeData)
  return false;
#undef DO_
}

void ItemTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:amarlon.ItemTypeData)
  // required int32 category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->category(), output);
  }

  // required int32 amunition_type = 2;
  if (has_amunition_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amunition_type(), output);
  }

  // required int32 armor_type = 3;
  if (has_armor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->armor_type(), output);
  }

  // required int32 weapon_type = 4;
  if (has_weapon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weapon_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:amarlon.ItemTypeData)
}

::google::protobuf::uint8* ItemTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:amarlon.ItemTypeData)
  // required int32 category = 1;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->category(), target);
  }

  // required int32 amunition_type = 2;
  if (has_amunition_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amunition_type(), target);
  }

  // required int32 armor_type = 3;
  if (has_armor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->armor_type(), target);
  }

  // required int32 weapon_type = 4;
  if (has_weapon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weapon_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amarlon.ItemTypeData)
  return target;
}

int ItemTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // required int32 amunition_type = 2;
    if (has_amunition_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amunition_type());
    }

    // required int32 armor_type = 3;
    if (has_armor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_type());
    }

    // required int32 weapon_type = 4;
    if (has_weapon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemTypeData::MergeFrom(const ItemTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_amunition_type()) {
      set_amunition_type(from.amunition_type());
    }
    if (from.has_armor_type()) {
      set_armor_type(from.armor_type());
    }
    if (from.has_weapon_type()) {
      set_weapon_type(from.weapon_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemTypeData::CopyFrom(const ItemTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTypeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ItemTypeData::Swap(ItemTypeData* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    std::swap(amunition_type_, other->amunition_type_);
    std::swap(armor_type_, other->armor_type_);
    std::swap(weapon_type_, other->weapon_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemTypeData_descriptor_;
  metadata.reflection = ItemTypeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)
