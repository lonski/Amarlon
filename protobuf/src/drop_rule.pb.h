// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drop_rule.proto

#ifndef PROTOBUF_drop_5frule_2eproto__INCLUDED
#define PROTOBUF_drop_5frule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_drop_5frule_2eproto();
void protobuf_AssignDesc_drop_5frule_2eproto();
void protobuf_ShutdownFile_drop_5frule_2eproto();

class DropRule;

// ===================================================================

class DropRule : public ::google::protobuf::Message {
 public:
  DropRule();
  virtual ~DropRule();

  DropRule(const DropRule& from);

  inline DropRule& operator=(const DropRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropRule& default_instance();

  void Swap(DropRule* other);

  // implements Message ----------------------------------------------

  DropRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropRule& from);
  void MergeFrom(const DropRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 actor_id = 1;
  inline bool has_actor_id() const;
  inline void clear_actor_id();
  static const int kActorIdFieldNumber = 1;
  inline ::google::protobuf::int32 actor_id() const;
  inline void set_actor_id(::google::protobuf::int32 value);

  // required int32 min = 2;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 2;
  inline ::google::protobuf::int32 min() const;
  inline void set_min(::google::protobuf::int32 value);

  // required int32 max = 3;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 3;
  inline ::google::protobuf::int32 max() const;
  inline void set_max(::google::protobuf::int32 value);

  // required float chance = 4;
  inline bool has_chance() const;
  inline void clear_chance();
  static const int kChanceFieldNumber = 4;
  inline float chance() const;
  inline void set_chance(float value);

  // @@protoc_insertion_point(class_scope:amarlon.DropRule)
 private:
  inline void set_has_actor_id();
  inline void clear_has_actor_id();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_chance();
  inline void clear_has_chance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 actor_id_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  float chance_;
  friend void  protobuf_AddDesc_drop_5frule_2eproto();
  friend void protobuf_AssignDesc_drop_5frule_2eproto();
  friend void protobuf_ShutdownFile_drop_5frule_2eproto();

  void InitAsDefaultInstance();
  static DropRule* default_instance_;
};
// ===================================================================


// ===================================================================

// DropRule

// required int32 actor_id = 1;
inline bool DropRule::has_actor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropRule::set_has_actor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropRule::clear_has_actor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropRule::clear_actor_id() {
  actor_id_ = 0;
  clear_has_actor_id();
}
inline ::google::protobuf::int32 DropRule::actor_id() const {
  // @@protoc_insertion_point(field_get:amarlon.DropRule.actor_id)
  return actor_id_;
}
inline void DropRule::set_actor_id(::google::protobuf::int32 value) {
  set_has_actor_id();
  actor_id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.DropRule.actor_id)
}

// required int32 min = 2;
inline bool DropRule::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropRule::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropRule::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropRule::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline ::google::protobuf::int32 DropRule::min() const {
  // @@protoc_insertion_point(field_get:amarlon.DropRule.min)
  return min_;
}
inline void DropRule::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:amarlon.DropRule.min)
}

// required int32 max = 3;
inline bool DropRule::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropRule::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropRule::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropRule::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline ::google::protobuf::int32 DropRule::max() const {
  // @@protoc_insertion_point(field_get:amarlon.DropRule.max)
  return max_;
}
inline void DropRule::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:amarlon.DropRule.max)
}

// required float chance = 4;
inline bool DropRule::has_chance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DropRule::set_has_chance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DropRule::clear_has_chance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DropRule::clear_chance() {
  chance_ = 0;
  clear_has_chance();
}
inline float DropRule::chance() const {
  // @@protoc_insertion_point(field_get:amarlon.DropRule.chance)
  return chance_;
}
inline void DropRule::set_chance(float value) {
  set_has_chance();
  chance_ = value;
  // @@protoc_insertion_point(field_set:amarlon.DropRule.chance)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drop_5frule_2eproto__INCLUDED
