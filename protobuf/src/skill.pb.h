// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill.proto

#ifndef PROTOBUF_skill_2eproto__INCLUDED
#define PROTOBUF_skill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace amarlon {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_skill_2eproto();
void protobuf_AssignDesc_skill_2eproto();
void protobuf_ShutdownFile_skill_2eproto();

class SkillData;
class SkillsData;

// ===================================================================

class SkillData : public ::google::protobuf::Message {
 public:
  SkillData();
  virtual ~SkillData();

  SkillData(const SkillData& from);

  inline SkillData& operator=(const SkillData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillData& default_instance();

  void Swap(SkillData* other);

  // implements Message ----------------------------------------------

  inline SkillData* New() const { return New(NULL); }

  SkillData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillData& from);
  void MergeFrom(const SkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkillData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional bool passive = 3;
  void clear_passive();
  static const int kPassiveFieldNumber = 3;
  bool passive() const;
  void set_passive(bool value);

  // optional int32 range = 4;
  void clear_range();
  static const int kRangeFieldNumber = 4;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // optional int32 radius = 5;
  void clear_radius();
  static const int kRadiusFieldNumber = 5;
  ::google::protobuf::int32 radius() const;
  void set_radius(::google::protobuf::int32 value);

  // optional int32 target_type = 6;
  void clear_target_type();
  static const int kTargetTypeFieldNumber = 6;
  ::google::protobuf::int32 target_type() const;
  void set_target_type(::google::protobuf::int32 value);

  // optional string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 8;
  void clear_description();
  static const int kDescriptionFieldNumber = 8;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:amarlon.SkillData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  bool passive_;
  ::google::protobuf::int32 range_;
  ::google::protobuf::int32 radius_;
  ::google::protobuf::int32 target_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_skill_2eproto();
  friend void protobuf_AssignDesc_skill_2eproto();
  friend void protobuf_ShutdownFile_skill_2eproto();

  void InitAsDefaultInstance();
  static SkillData* default_instance_;
};
// -------------------------------------------------------------------

class SkillsData : public ::google::protobuf::Message {
 public:
  SkillsData();
  virtual ~SkillsData();

  SkillsData(const SkillsData& from);

  inline SkillsData& operator=(const SkillsData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillsData& default_instance();

  void Swap(SkillsData* other);

  // implements Message ----------------------------------------------

  inline SkillsData* New() const { return New(NULL); }

  SkillsData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillsData& from);
  void MergeFrom(const SkillsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkillsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .amarlon.SkillData skill = 1;
  int skill_size() const;
  void clear_skill();
  static const int kSkillFieldNumber = 1;
  const ::amarlon::SkillData& skill(int index) const;
  ::amarlon::SkillData* mutable_skill(int index);
  ::amarlon::SkillData* add_skill();
  ::google::protobuf::RepeatedPtrField< ::amarlon::SkillData >*
      mutable_skill();
  const ::google::protobuf::RepeatedPtrField< ::amarlon::SkillData >&
      skill() const;

  // @@protoc_insertion_point(class_scope:amarlon.SkillsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::amarlon::SkillData > skill_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_skill_2eproto();
  friend void protobuf_AssignDesc_skill_2eproto();
  friend void protobuf_ShutdownFile_skill_2eproto();

  void InitAsDefaultInstance();
  static SkillsData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SkillData

// optional int32 id = 1;
inline void SkillData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SkillData::id() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.id)
  return id_;
}
inline void SkillData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.id)
}

// optional int32 level = 2;
inline void SkillData::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 SkillData::level() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.level)
  return level_;
}
inline void SkillData::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.level)
}

// optional bool passive = 3;
inline void SkillData::clear_passive() {
  passive_ = false;
}
inline bool SkillData::passive() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.passive)
  return passive_;
}
inline void SkillData::set_passive(bool value) {
  
  passive_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.passive)
}

// optional int32 range = 4;
inline void SkillData::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 SkillData::range() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.range)
  return range_;
}
inline void SkillData::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.range)
}

// optional int32 radius = 5;
inline void SkillData::clear_radius() {
  radius_ = 0;
}
inline ::google::protobuf::int32 SkillData::radius() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.radius)
  return radius_;
}
inline void SkillData::set_radius(::google::protobuf::int32 value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.radius)
}

// optional int32 target_type = 6;
inline void SkillData::clear_target_type() {
  target_type_ = 0;
}
inline ::google::protobuf::int32 SkillData::target_type() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.target_type)
  return target_type_;
}
inline void SkillData::set_target_type(::google::protobuf::int32 value) {
  
  target_type_ = value;
  // @@protoc_insertion_point(field_set:amarlon.SkillData.target_type)
}

// optional string name = 7;
inline void SkillData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SkillData::name() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SkillData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.SkillData.name)
}
inline void SkillData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.SkillData.name)
}
inline void SkillData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.SkillData.name)
}
inline ::std::string* SkillData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:amarlon.SkillData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SkillData::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SkillData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:amarlon.SkillData.name)
}

// optional string description = 8;
inline void SkillData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SkillData::description() const {
  // @@protoc_insertion_point(field_get:amarlon.SkillData.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SkillData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:amarlon.SkillData.description)
}
inline void SkillData::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amarlon.SkillData.description)
}
inline void SkillData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amarlon.SkillData.description)
}
inline ::std::string* SkillData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:amarlon.SkillData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SkillData::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SkillData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:amarlon.SkillData.description)
}

// -------------------------------------------------------------------

// SkillsData

// repeated .amarlon.SkillData skill = 1;
inline int SkillsData::skill_size() const {
  return skill_.size();
}
inline void SkillsData::clear_skill() {
  skill_.Clear();
}
inline const ::amarlon::SkillData& SkillsData::skill(int index) const {
  // @@protoc_insertion_point(field_get:amarlon.SkillsData.skill)
  return skill_.Get(index);
}
inline ::amarlon::SkillData* SkillsData::mutable_skill(int index) {
  // @@protoc_insertion_point(field_mutable:amarlon.SkillsData.skill)
  return skill_.Mutable(index);
}
inline ::amarlon::SkillData* SkillsData::add_skill() {
  // @@protoc_insertion_point(field_add:amarlon.SkillsData.skill)
  return skill_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::amarlon::SkillData >*
SkillsData::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:amarlon.SkillsData.skill)
  return &skill_;
}
inline const ::google::protobuf::RepeatedPtrField< ::amarlon::SkillData >&
SkillsData::skill() const {
  // @@protoc_insertion_point(field_list:amarlon.SkillsData.skill)
  return skill_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amarlon

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_skill_2eproto__INCLUDED
